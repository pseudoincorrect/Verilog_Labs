
DDA_nios.elf:     file format elf32-littlenios2
DDA_nios.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002808 memsz 0x00002808 flags r-x
    LOAD off    0x00003828 vaddr 0x00002828 paddr 0x00002b98 align 2**12
         filesz 0x00000370 memsz 0x00000370 flags rw-
    LOAD off    0x00003f08 vaddr 0x00002f08 paddr 0x00002f08 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002720  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  00002740  00002740  00003740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000370  00002828  00002b98  00003828  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00002f08  00002f08  00003f08  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000448  00000000  00000000  00003bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000681  00000000  00000000  00004008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000878f  00000000  00000000  00004689  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c43  00000000  00000000  0000ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005a62  00000000  00000000  0000ea5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000840  00000000  00000000  000144c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ae8  00000000  00000000  00014d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000d39  00000000  00000000  000157e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00016524  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  00016578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017d43  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00017d46  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00017d49  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00017d4a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00017d4b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00017d4f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00017d53  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00017d57  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00017d60  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00017d69  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000b  00000000  00000000  00017d72  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000043  00000000  00000000  00017d7d  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006c47f  00000000  00000000  00017dc0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
00002740 l    d  .rodata	00000000 .rodata
00002828 l    d  .rwdata	00000000 .rwdata
00002f08 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 count_binary.c
000003a4 l     F .text	00000054 initial_message
000003f8 l     F .text	000001f4 init_dda
00000b18 l     F .text	00000048 abs
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002828 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000dd8 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000ff0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002908 l     O .rwdata	0000002c JTAG_UART
00002934 l     O .rwdata	00000048 VGA_Char_Buffer
0000297c l     O .rwdata	00000054 VGA_Pixel_Buffer
00001368 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00001b24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001ba0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001c80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001da4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00001ee0 l     F .text	000000dc alt_file_locked
00002144 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000251c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000026dc l     F .text	00000040 alt_sim_halt
00000e44 g     F .text	0000005c alt_main
00000b60 g     F .text	00000090 _puts_r
00002b98 g       *ABS*	00000000 __flash_rwdata_start
000005ec g     F .text	00000130 draw_springs
0000178c g     F .text	00000114 alt_up_char_buffer_string
000016bc g     F .text	000000d0 alt_up_char_buffer_draw
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002f08 g     O .bss	00000004 errno
00002f10 g     O .bss	00000004 alt_argv
0000ab78 g       *ABS*	00000000 _gp
00000ea0 g     F .text	00000030 usleep
000029f8 g     O .rwdata	00000180 alt_fd_list
00001ce0 g     F .text	00000094 alt_find_dev
000018a0 g     F .text	0000005c alt_up_char_buffer_clear
00001e68 g     F .text	00000078 alt_io_redirect
00000bf0 g     F .text	00000014 puts
00001450 g     F .text	00000104 altera_avalon_jtag_uart_read
0000071c g     F .text	00000188 VGA_line
000023fc g     F .text	00000090 alt_icache_flush
00002b90 g     O .rwdata	00000004 alt_max_fd
00002b7c g     O .rwdata	00000004 _global_impure_ptr
00002f18 g       *ABS*	00000000 __bss_end
000029d0 g     O .rwdata	00000028 alt_dev_null
00001b84 g     F .text	0000001c alt_dcache_flush_all
00002b98 g       *ABS*	00000000 __ram_rwdata_end
00002b88 g     O .rwdata	00000008 alt_dev_list
00000ed0 g     F .text	00000120 write
00002828 g       *ABS*	00000000 __ram_rodata_end
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00002f18 g       *ABS*	00000000 end
000015f8 g     F .text	00000084 alt_up_char_buffer_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
00001554 g     F .text	000000a4 altera_avalon_jtag_uart_write
00002520 g     F .text	000001bc __call_exitprocs
00000020 g     F .text	0000003c _start
00001084 g     F .text	000002e4 alt_sys_init
00000908 g     F .text	000000b8 VGA_box
00002828 g       *ABS*	00000000 __ram_rwdata_start
00002740 g       *ABS*	00000000 __ram_rodata_start
000013a0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00002344 g     F .text	000000b8 alt_get_fd
000018fc g     F .text	0000012c alt_busy_sleep
000024ac g     F .text	0000003c memcmp
00002f18 g       *ABS*	00000000 __alt_stack_base
00002224 g     F .text	00000120 alt_find_file
00001bcc g     F .text	000000b4 alt_dev_llist_insert
00000c24 g     F .text	000000bc __sfvwrite_small_dev
00002f08 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000348 main
00002f14 g     O .bss	00000004 alt_envp
0000167c g     F .text	00000040 alt_up_char_buffer_open_dev
000013f8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
000009c0 g     F .text	00000158 VGA_circle
00002b94 g     O .rwdata	00000004 alt_errno
000024e8 g     F .text	00000034 strcmp
00002740 g       *ABS*	00000000 __flash_rodata_start
00001050 g     F .text	00000034 alt_irq_init
000021a4 g     F .text	00000060 alt_release_fd
000008a4 g     F .text	00000064 VGA_point
00000ce0 g     F .text	00000078 _write_r
00002b78 g     O .rwdata	00000004 _impure_ptr
00002f0c g     O .bss	00000004 alt_argc
00002b80 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00002b98 g       *ABS*	00000000 _edata
00002f18 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00002204 g     F .text	00000020 altera_nios2_qsys_irq_init
0000248c g     F .text	00000020 exit
08000000 g       *ABS*	00000000 __alt_data_end
0000271c g     F .text	00000020 _exit
00000c04 g     F .text	00000020 strlen
00001fbc g     F .text	00000188 open
00001d74 g     F .text	00000030 alt_icache_flush_all
00001a28 g     F .text	000000fc close
00000d58 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08400814 	ori	at,at,32
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
      20:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
      24:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
      28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
      2c:	d6aade14 	ori	gp,gp,43896
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      34:	108bc214 	ori	r2,r2,12040

    movhi r3, %hi(__bss_end)
      38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      3c:	18cbc614 	ori	r3,r3,12056

    beq r2, r3, 1f
      40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
      44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      50:	0000d580 	call	d58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      54:	0000e440 	call	e44 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:


////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
int main(void)
{
      5c:	defff704 	addi	sp,sp,-36
      60:	dfc00815 	stw	ra,32(sp)
      64:	df000715 	stw	fp,28(sp)
      68:	df000704 	addi	fp,sp,28
    int positions;
    int16_t x1_16, x2_16;
    int x1 = 0, x2 = 0, x2_old = 0, x1_old = 0;
      6c:	e03ffd15 	stw	zero,-12(fp)
      70:	e03ffc15 	stw	zero,-16(fp)
      74:	e03ffb15 	stw	zero,-20(fp)
      78:	e03ffa15 	stw	zero,-24(fp)

    initial_message();
      7c:	00003a40 	call	3a4 <initial_message>

    init_dda();
      80:	00003f80 	call	3f8 <init_dda>

    // draw_something();
    VGA_box (0, 0, 639, 479, black); // clear screen 640 x 480
      84:	d8000015 	stw	zero,0(sp)
      88:	0009883a 	mov	r4,zero
      8c:	000b883a 	mov	r5,zero
      90:	01809fc4 	movi	r6,639
      94:	01c077c4 	movi	r7,479
      98:	00009080 	call	908 <VGA_box>
    VGA_box (100, 100, 539, 379, blue); // clear screen 640 x 480
      9c:	0080c0c4 	movi	r2,771
      a0:	d8800015 	stw	r2,0(sp)
      a4:	01001904 	movi	r4,100
      a8:	01401904 	movi	r5,100
      ac:	018086c4 	movi	r6,539
      b0:	01c05ec4 	movi	r7,379
      b4:	00009080 	call	908 <VGA_box>
    VGA_box (100, 160, 150, 320, green); // clear screen 640 x 480
      b8:	00870704 	movi	r2,7196
      bc:	d8800015 	stw	r2,0(sp)
      c0:	01001904 	movi	r4,100
      c4:	01402804 	movi	r5,160
      c8:	01802584 	movi	r6,150
      cc:	01c05004 	movi	r7,320
      d0:	00009080 	call	908 <VGA_box>
    VGA_box (489, 160, 539, 320, green); // clear screen 640 x 480
      d4:	00870704 	movi	r2,7196
      d8:	d8800015 	stw	r2,0(sp)
      dc:	01007a44 	movi	r4,489
      e0:	01402804 	movi	r5,160
      e4:	018086c4 	movi	r6,539
      e8:	01c05004 	movi	r7,320
      ec:	00009080 	call	908 <VGA_box>



    // draw_something();
    positions = IORD_ALTERA_AVALON_PIO_DATA(PIO_POSITIONS_IN_BASE);
      f0:	00820834 	movhi	r2,2080
      f4:	10800037 	ldwio	r2,0(r2)
      f8:	e0bfff15 	stw	r2,-4(fp)

    x1_16  = (positions & 0xFFFF0000) >> 16;
      fc:	e0bfff17 	ldw	r2,-4(fp)
     100:	10bfffec 	andhi	r2,r2,65535
     104:	1004d43a 	srli	r2,r2,16
     108:	e0bffe8d 	sth	r2,-6(fp)
    x2_16  = (positions & 0x0000FFFF);
     10c:	e0bfff17 	ldw	r2,-4(fp)
     110:	1007883a 	mov	r3,r2
     114:	00bfffc4 	movi	r2,-1
     118:	1884703a 	and	r2,r3,r2
     11c:	e0bffe0d 	sth	r2,-8(fp)
    x1 = (x1_16 + 32768) / 102;
     120:	e0fffe8f 	ldh	r3,-6(fp)
     124:	00a00014 	movui	r2,32768
     128:	1887883a 	add	r3,r3,r2
     12c:	00801984 	movi	r2,102
     130:	1885283a 	div	r2,r3,r2
     134:	e0bffd15 	stw	r2,-12(fp)
    x2 = (x2_16 + 32768) / 102;
     138:	e0fffe0f 	ldh	r3,-8(fp)
     13c:	00a00014 	movui	r2,32768
     140:	1887883a 	add	r3,r3,r2
     144:	00801984 	movi	r2,102
     148:	1885283a 	div	r2,r3,r2
     14c:	e0bffc15 	stw	r2,-16(fp)

    // draw_springs(100, 300, 240, 100, white);

    while (1)
    {
        positions = IORD_ALTERA_AVALON_PIO_DATA(PIO_POSITIONS_IN_BASE);
     150:	00820834 	movhi	r2,2080
     154:	10800037 	ldwio	r2,0(r2)
     158:	e0bfff15 	stw	r2,-4(fp)

        x1_16 = (positions & 0xFFFF0000) >> 16;
     15c:	e0bfff17 	ldw	r2,-4(fp)
     160:	10bfffec 	andhi	r2,r2,65535
     164:	1004d43a 	srli	r2,r2,16
     168:	e0bffe8d 	sth	r2,-6(fp)
        x2_16 = (positions & 0x0000FFFF);
     16c:	e0bfff17 	ldw	r2,-4(fp)
     170:	1007883a 	mov	r3,r2
     174:	00bfffc4 	movi	r2,-1
     178:	1884703a 	and	r2,r3,r2
     17c:	e0bffe0d 	sth	r2,-8(fp)

        x1_old = x1;
     180:	e0bffd17 	ldw	r2,-12(fp)
     184:	e0bffa15 	stw	r2,-24(fp)
        x2_old = x2;
     188:	e0bffc17 	ldw	r2,-16(fp)
     18c:	e0bffb15 	stw	r2,-20(fp)

        x1 = (x1_16 + 32768) / 102;
     190:	e0fffe8f 	ldh	r3,-6(fp)
     194:	00a00014 	movui	r2,32768
     198:	1887883a 	add	r3,r3,r2
     19c:	00801984 	movi	r2,102
     1a0:	1885283a 	div	r2,r3,r2
     1a4:	e0bffd15 	stw	r2,-12(fp)
        x2 = (x2_16 + 32768) / 102;
     1a8:	e0fffe0f 	ldh	r3,-8(fp)
     1ac:	00a00014 	movui	r2,32768
     1b0:	1887883a 	add	r3,r3,r2
     1b4:	00801984 	movi	r2,102
     1b8:	1885283a 	div	r2,r3,r2
     1bc:	e0bffc15 	stw	r2,-16(fp)

        // VGA_box (x1_old-10, 200, x1_old+10, 280, black);
        // VGA_box (x2_old-10, 200, x2_old+10, 280, black);


        if      (x1 > x1_old) {VGA_box (x1_old-10, 200, x1-10,     280, blue);}
     1c0:	e0fffd17 	ldw	r3,-12(fp)
     1c4:	e0bffa17 	ldw	r2,-24(fp)
     1c8:	10c00a0e 	bge	r2,r3,1f4 <main+0x198>
     1cc:	e0bffa17 	ldw	r2,-24(fp)
     1d0:	113ffd84 	addi	r4,r2,-10
     1d4:	e0bffd17 	ldw	r2,-12(fp)
     1d8:	11bffd84 	addi	r6,r2,-10
     1dc:	0080c0c4 	movi	r2,771
     1e0:	d8800015 	stw	r2,0(sp)
     1e4:	01403204 	movi	r5,200
     1e8:	01c04604 	movi	r7,280
     1ec:	00009080 	call	908 <VGA_box>
     1f0:	00000c06 	br	224 <main+0x1c8>
        else if (x1 < x1_old) {VGA_box (x1+10,     200, x1_old+10, 280, blue);}
     1f4:	e0fffd17 	ldw	r3,-12(fp)
     1f8:	e0bffa17 	ldw	r2,-24(fp)
     1fc:	1880090e 	bge	r3,r2,224 <main+0x1c8>
     200:	e0bffd17 	ldw	r2,-12(fp)
     204:	11000284 	addi	r4,r2,10
     208:	e0bffa17 	ldw	r2,-24(fp)
     20c:	11800284 	addi	r6,r2,10
     210:	0080c0c4 	movi	r2,771
     214:	d8800015 	stw	r2,0(sp)
     218:	01403204 	movi	r5,200
     21c:	01c04604 	movi	r7,280
     220:	00009080 	call	908 <VGA_box>
        VGA_box (x1-10, 200, x1+10, 280, yellow);
     224:	e0bffd17 	ldw	r2,-12(fp)
     228:	113ffd84 	addi	r4,r2,-10
     22c:	e0bffd17 	ldw	r2,-12(fp)
     230:	11800284 	addi	r6,r2,10
     234:	00bf3f04 	movi	r2,-772
     238:	d8800015 	stw	r2,0(sp)
     23c:	01403204 	movi	r5,200
     240:	01c04604 	movi	r7,280
     244:	00009080 	call	908 <VGA_box>

        if      (x2 > x2_old) {VGA_box (x2_old-10, 200, x2-10,     280, blue);}
     248:	e0fffc17 	ldw	r3,-16(fp)
     24c:	e0bffb17 	ldw	r2,-20(fp)
     250:	10c00a0e 	bge	r2,r3,27c <main+0x220>
     254:	e0bffb17 	ldw	r2,-20(fp)
     258:	113ffd84 	addi	r4,r2,-10
     25c:	e0bffc17 	ldw	r2,-16(fp)
     260:	11bffd84 	addi	r6,r2,-10
     264:	0080c0c4 	movi	r2,771
     268:	d8800015 	stw	r2,0(sp)
     26c:	01403204 	movi	r5,200
     270:	01c04604 	movi	r7,280
     274:	00009080 	call	908 <VGA_box>
     278:	00000c06 	br	2ac <main+0x250>
        else if (x2 < x2_old) {VGA_box (x2+10,     200, x2_old+10, 280, blue);}
     27c:	e0fffc17 	ldw	r3,-16(fp)
     280:	e0bffb17 	ldw	r2,-20(fp)
     284:	1880090e 	bge	r3,r2,2ac <main+0x250>
     288:	e0bffc17 	ldw	r2,-16(fp)
     28c:	11000284 	addi	r4,r2,10
     290:	e0bffb17 	ldw	r2,-20(fp)
     294:	11800284 	addi	r6,r2,10
     298:	0080c0c4 	movi	r2,771
     29c:	d8800015 	stw	r2,0(sp)
     2a0:	01403204 	movi	r5,200
     2a4:	01c04604 	movi	r7,280
     2a8:	00009080 	call	908 <VGA_box>
        VGA_box (x2-10, 200, x2+10, 280, red);
     2ac:	e0bffc17 	ldw	r2,-16(fp)
     2b0:	113ffd84 	addi	r4,r2,-10
     2b4:	e0bffc17 	ldw	r2,-16(fp)
     2b8:	11800284 	addi	r6,r2,10
     2bc:	00b83804 	movi	r2,-7968
     2c0:	d8800015 	stw	r2,0(sp)
     2c4:	01403204 	movi	r5,200
     2c8:	01c04604 	movi	r7,280
     2cc:	00009080 	call	908 <VGA_box>

        // left spring
        draw_springs(150, x1_old-10, 240, 100, blue);
     2d0:	e0bffa17 	ldw	r2,-24(fp)
     2d4:	117ffd84 	addi	r5,r2,-10
     2d8:	0080c0c4 	movi	r2,771
     2dc:	d8800015 	stw	r2,0(sp)
     2e0:	01002584 	movi	r4,150
     2e4:	01803c04 	movi	r6,240
     2e8:	01c01904 	movi	r7,100
     2ec:	00005ec0 	call	5ec <draw_springs>
        draw_springs(150, x1-10,     240, 100, white);
     2f0:	e0bffd17 	ldw	r2,-12(fp)
     2f4:	117ffd84 	addi	r5,r2,-10
     2f8:	00bfffc4 	movi	r2,-1
     2fc:	d8800015 	stw	r2,0(sp)
     300:	01002584 	movi	r4,150
     304:	01803c04 	movi	r6,240
     308:	01c01904 	movi	r7,100
     30c:	00005ec0 	call	5ec <draw_springs>
        // middle spring
        draw_springs(x1_old+10, x2_old-10, 240, 100, blue);
     310:	e0bffa17 	ldw	r2,-24(fp)
     314:	11000284 	addi	r4,r2,10
     318:	e0bffb17 	ldw	r2,-20(fp)
     31c:	117ffd84 	addi	r5,r2,-10
     320:	0080c0c4 	movi	r2,771
     324:	d8800015 	stw	r2,0(sp)
     328:	01803c04 	movi	r6,240
     32c:	01c01904 	movi	r7,100
     330:	00005ec0 	call	5ec <draw_springs>
        draw_springs(x1+10,     x2-10,     240, 100, white);
     334:	e0bffd17 	ldw	r2,-12(fp)
     338:	11000284 	addi	r4,r2,10
     33c:	e0bffc17 	ldw	r2,-16(fp)
     340:	117ffd84 	addi	r5,r2,-10
     344:	00bfffc4 	movi	r2,-1
     348:	d8800015 	stw	r2,0(sp)
     34c:	01803c04 	movi	r6,240
     350:	01c01904 	movi	r7,100
     354:	00005ec0 	call	5ec <draw_springs>
        // right spring
        draw_springs(x2_old+10, 489, 240, 100, blue);
     358:	e0bffb17 	ldw	r2,-20(fp)
     35c:	11000284 	addi	r4,r2,10
     360:	0080c0c4 	movi	r2,771
     364:	d8800015 	stw	r2,0(sp)
     368:	01407a44 	movi	r5,489
     36c:	01803c04 	movi	r6,240
     370:	01c01904 	movi	r7,100
     374:	00005ec0 	call	5ec <draw_springs>
        draw_springs(x2+10,     489, 240, 100, white);
     378:	e0bffc17 	ldw	r2,-16(fp)
     37c:	11000284 	addi	r4,r2,10
     380:	00bfffc4 	movi	r2,-1
     384:	d8800015 	stw	r2,0(sp)
     388:	01407a44 	movi	r5,489
     38c:	01803c04 	movi	r6,240
     390:	01c01904 	movi	r7,100
     394:	00005ec0 	call	5ec <draw_springs>

        usleep(16666);
     398:	01104684 	movi	r4,16666
     39c:	0000ea00 	call	ea0 <usleep>
    }
     3a0:	003f6b06 	br	150 <main+0xf4>

000003a4 <initial_message>:


////////////////////////////////////////////////////////
////////////////////////////////////////////////////////
static void initial_message()
{
     3a4:	defffe04 	addi	sp,sp,-8
     3a8:	dfc00115 	stw	ra,4(sp)
     3ac:	df000015 	stw	fp,0(sp)
     3b0:	d839883a 	mov	fp,sp
    printf("\n\n");
     3b4:	01000034 	movhi	r4,0
     3b8:	2109d004 	addi	r4,r4,10048
     3bc:	0000bf00 	call	bf0 <puts>
    printf("**************************************\n");
     3c0:	01000034 	movhi	r4,0
     3c4:	2109d104 	addi	r4,r4,10052
     3c8:	0000bf00 	call	bf0 <puts>
    printf("* Let's display something on the VGA *\n");
     3cc:	01000034 	movhi	r4,0
     3d0:	2109db04 	addi	r4,r4,10092
     3d4:	0000bf00 	call	bf0 <puts>
    printf("**************************************\n");
     3d8:	01000034 	movhi	r4,0
     3dc:	2109d104 	addi	r4,r4,10052
     3e0:	0000bf00 	call	bf0 <puts>
}
     3e4:	e037883a 	mov	sp,fp
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret

000003f8 <init_dda>:




static void init_dda()
{
     3f8:	deffe704 	addi	sp,sp,-100
     3fc:	df001815 	stw	fp,96(sp)
     400:	df001804 	addi	fp,sp,96
    // x1 <= 18'h38000; //  -0.5; // symetrical
    // v1 <= 18'h00000; //  0;
    // x2 <= 18'h08000; //  0.5;
    // v2 <= 18'h00000; //  0;

    uint32_t start_init_addr = 0x1;
     404:	00800044 	movi	r2,1
     408:	e0bfff15 	stw	r2,-4(fp)
    uint32_t k1_init_addr    = 0x2;
     40c:	00800084 	movi	r2,2
     410:	e0bffe15 	stw	r2,-8(fp)
    uint32_t k2_init_addr    = 0x3;
     414:	008000c4 	movi	r2,3
     418:	e0bffd15 	stw	r2,-12(fp)
    uint32_t km_init_addr    = 0x4;
     41c:	00800104 	movi	r2,4
     420:	e0bffc15 	stw	r2,-16(fp)
    uint32_t x1_init_addr    = 0x5;
     424:	00800144 	movi	r2,5
     428:	e0bffb15 	stw	r2,-20(fp)
    uint32_t v1_init_addr    = 0x6;
     42c:	00800184 	movi	r2,6
     430:	e0bffa15 	stw	r2,-24(fp)
    uint32_t x2_init_addr    = 0x7;
     434:	008001c4 	movi	r2,7
     438:	e0bff915 	stw	r2,-28(fp)
    uint32_t v2_init_addr    = 0x8;
     43c:	00800204 	movi	r2,8
     440:	e0bff815 	stw	r2,-32(fp)

    uint32_t k1_init_val   = 0x10000;
     444:	00800074 	movhi	r2,1
     448:	e0bff715 	stw	r2,-36(fp)
    uint32_t k2_init_val   = 0x10000;
     44c:	00800074 	movhi	r2,1
     450:	e0bff615 	stw	r2,-40(fp)
    uint32_t km_init_val   = 0x10000;
     454:	00800074 	movhi	r2,1
     458:	e0bff515 	stw	r2,-44(fp)
    uint32_t x1_init_val   = 0x3B300;
     45c:	00800134 	movhi	r2,4
     460:	10acc004 	addi	r2,r2,-19712
     464:	e0bff415 	stw	r2,-48(fp)
    uint32_t v1_init_val   = 0x3B300;
     468:	00800134 	movhi	r2,4
     46c:	10acc004 	addi	r2,r2,-19712
     470:	e0bff315 	stw	r2,-52(fp)
    uint32_t x2_init_val   = 0x04D00;
     474:	00934004 	movi	r2,19712
     478:	e0bff215 	stw	r2,-56(fp)
    uint32_t v2_init_val   = 0x04D00;
     47c:	00934004 	movi	r2,19712
     480:	e0bff115 	stw	r2,-60(fp)

    uint32_t k1_init   = (0xFFFFFFFF & k1_init_val) | (k1_init_addr << 24);
     484:	e0bffe17 	ldw	r2,-8(fp)
     488:	1006963a 	slli	r3,r2,24
     48c:	e0bff717 	ldw	r2,-36(fp)
     490:	1884b03a 	or	r2,r3,r2
     494:	e0bff015 	stw	r2,-64(fp)
    uint32_t k2_init   = (0xFFFFFFFF & k2_init_val) | (k2_init_addr << 24);
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	1006963a 	slli	r3,r2,24
     4a0:	e0bff617 	ldw	r2,-40(fp)
     4a4:	1884b03a 	or	r2,r3,r2
     4a8:	e0bfef15 	stw	r2,-68(fp)
    uint32_t km_init   = (0xFFFFFFFF & km_init_val) | (km_init_addr << 24);
     4ac:	e0bffc17 	ldw	r2,-16(fp)
     4b0:	1006963a 	slli	r3,r2,24
     4b4:	e0bff517 	ldw	r2,-44(fp)
     4b8:	1884b03a 	or	r2,r3,r2
     4bc:	e0bfee15 	stw	r2,-72(fp)
    uint32_t x1_init   = (0xFFFFFFFF & x1_init_val) | (x1_init_addr << 24);
     4c0:	e0bffb17 	ldw	r2,-20(fp)
     4c4:	1006963a 	slli	r3,r2,24
     4c8:	e0bff417 	ldw	r2,-48(fp)
     4cc:	1884b03a 	or	r2,r3,r2
     4d0:	e0bfed15 	stw	r2,-76(fp)
    uint32_t v1_init   = (0xFFFFFFFF & v1_init_val) | (v1_init_addr << 24);
     4d4:	e0bffa17 	ldw	r2,-24(fp)
     4d8:	1006963a 	slli	r3,r2,24
     4dc:	e0bff317 	ldw	r2,-52(fp)
     4e0:	1884b03a 	or	r2,r3,r2
     4e4:	e0bfec15 	stw	r2,-80(fp)
    uint32_t x2_init   = (0xFFFFFFFF & x2_init_val) | (x2_init_addr << 24);
     4e8:	e0bff917 	ldw	r2,-28(fp)
     4ec:	1006963a 	slli	r3,r2,24
     4f0:	e0bff217 	ldw	r2,-56(fp)
     4f4:	1884b03a 	or	r2,r3,r2
     4f8:	e0bfeb15 	stw	r2,-84(fp)
    uint32_t v2_init   = (0xFFFFFFFF & v2_init_val) | (v2_init_addr << 24);
     4fc:	e0bff817 	ldw	r2,-32(fp)
     500:	1006963a 	slli	r3,r2,24
     504:	e0bff117 	ldw	r2,-60(fp)
     508:	1884b03a 	or	r2,r3,r2
     50c:	e0bfea15 	stw	r2,-88(fp)

    uint32_t start_init_ON =  (0xFFFFFFFF & 0x1) | (start_init_addr << 24);
     510:	e0bfff17 	ldw	r2,-4(fp)
     514:	1004963a 	slli	r2,r2,24
     518:	10800054 	ori	r2,r2,1
     51c:	e0bfe915 	stw	r2,-92(fp)
    uint32_t start_init_OFF = (0xFFFFFFFF & 0x0) | (start_init_addr << 24);
     520:	e0bfff17 	ldw	r2,-4(fp)
     524:	1004963a 	slli	r2,r2,24
     528:	e0bfe815 	stw	r2,-96(fp)

        // DDA OFF
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_INIT_DDA_OUT_BASE, start_init_OFF );
     52c:	e0ffe817 	ldw	r3,-96(fp)
     530:	00820834 	movhi	r2,2080
     534:	10800404 	addi	r2,r2,16
     538:	10c00035 	stwio	r3,0(r2)
    // send DDA initial values
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, k1_init );
     53c:	e0fff017 	ldw	r3,-64(fp)
     540:	00820834 	movhi	r2,2080
     544:	10800404 	addi	r2,r2,16
     548:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, k2_init );
     54c:	e0ffef17 	ldw	r3,-68(fp)
     550:	00820834 	movhi	r2,2080
     554:	10800404 	addi	r2,r2,16
     558:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, km_init );
     55c:	e0ffee17 	ldw	r3,-72(fp)
     560:	00820834 	movhi	r2,2080
     564:	10800404 	addi	r2,r2,16
     568:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, x1_init );
     56c:	e0ffed17 	ldw	r3,-76(fp)
     570:	00820834 	movhi	r2,2080
     574:	10800404 	addi	r2,r2,16
     578:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, v1_init );
     57c:	e0ffec17 	ldw	r3,-80(fp)
     580:	00820834 	movhi	r2,2080
     584:	10800404 	addi	r2,r2,16
     588:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, x2_init );
     58c:	e0ffeb17 	ldw	r3,-84(fp)
     590:	00820834 	movhi	r2,2080
     594:	10800404 	addi	r2,r2,16
     598:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA( PIO_INIT_DDA_OUT_BASE, v2_init );
     59c:	e0ffea17 	ldw	r3,-88(fp)
     5a0:	00820834 	movhi	r2,2080
     5a4:	10800404 	addi	r2,r2,16
     5a8:	10c00035 	stwio	r3,0(r2)
    // DDA ON then OFF
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_INIT_DDA_OUT_BASE, start_init_ON  );
     5ac:	e0ffe917 	ldw	r3,-92(fp)
     5b0:	00820834 	movhi	r2,2080
     5b4:	10800404 	addi	r2,r2,16
     5b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_INIT_DDA_OUT_BASE, start_init_ON  );
     5bc:	e0ffe917 	ldw	r3,-92(fp)
     5c0:	00820834 	movhi	r2,2080
     5c4:	10800404 	addi	r2,r2,16
     5c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(PIO_INIT_DDA_OUT_BASE, start_init_OFF );
     5cc:	e0ffe817 	ldw	r3,-96(fp)
     5d0:	00820834 	movhi	r2,2080
     5d4:	10800404 	addi	r2,r2,16
     5d8:	10c00035 	stwio	r3,0(r2)
}
     5dc:	e037883a 	mov	sp,fp
     5e0:	df000017 	ldw	fp,0(sp)
     5e4:	dec00104 	addi	sp,sp,4
     5e8:	f800283a 	ret

000005ec <draw_springs>:



void draw_springs (int x1, int x2, int y_mean, int height, short color)
{
     5ec:	defff504 	addi	sp,sp,-44
     5f0:	dfc00a15 	stw	ra,40(sp)
     5f4:	df000915 	stw	fp,36(sp)
     5f8:	df000904 	addi	fp,sp,36
     5fc:	e13ffb15 	stw	r4,-20(fp)
     600:	e17ffc15 	stw	r5,-16(fp)
     604:	e1bffd15 	stw	r6,-12(fp)
     608:	e1fffe15 	stw	r7,-8(fp)
     60c:	e0800217 	ldw	r2,8(fp)
     610:	e0bfff0d 	sth	r2,-4(fp)
    int spring_x_1;
    int spring_x_2;
    int delta;

    delta = ((x2-x1) / 3);
     614:	e0fffc17 	ldw	r3,-16(fp)
     618:	e0bffb17 	ldw	r2,-20(fp)
     61c:	1887c83a 	sub	r3,r3,r2
     620:	008000c4 	movi	r2,3
     624:	1885283a 	div	r2,r3,r2
     628:	e0bff815 	stw	r2,-32(fp)
    spring_x_1 = x1 + delta;
     62c:	e0fffb17 	ldw	r3,-20(fp)
     630:	e0bff817 	ldw	r2,-32(fp)
     634:	1885883a 	add	r2,r3,r2
     638:	e0bffa15 	stw	r2,-24(fp)
    spring_x_2 = x1 + delta * 2;
     63c:	e0bff817 	ldw	r2,-32(fp)
     640:	1085883a 	add	r2,r2,r2
     644:	1007883a 	mov	r3,r2
     648:	e0bffb17 	ldw	r2,-20(fp)
     64c:	1885883a 	add	r2,r3,r2
     650:	e0bff915 	stw	r2,-28(fp)

    VGA_line (x1,           y_mean,             spring_x_1,   y_mean + height/2,  color);
     654:	e0fffe17 	ldw	r3,-8(fp)
     658:	1804d7fa 	srli	r2,r3,31
     65c:	10c5883a 	add	r2,r2,r3
     660:	1005d07a 	srai	r2,r2,1
     664:	1007883a 	mov	r3,r2
     668:	e0bffd17 	ldw	r2,-12(fp)
     66c:	188f883a 	add	r7,r3,r2
     670:	e0bfff0f 	ldh	r2,-4(fp)
     674:	d8800015 	stw	r2,0(sp)
     678:	e13ffb17 	ldw	r4,-20(fp)
     67c:	e17ffd17 	ldw	r5,-12(fp)
     680:	e1bffa17 	ldw	r6,-24(fp)
     684:	000071c0 	call	71c <VGA_line>
    VGA_line (spring_x_1,   y_mean + height/2,  spring_x_2,   y_mean - height/2,  color);
     688:	e0fffe17 	ldw	r3,-8(fp)
     68c:	1804d7fa 	srli	r2,r3,31
     690:	10c5883a 	add	r2,r2,r3
     694:	1005d07a 	srai	r2,r2,1
     698:	1007883a 	mov	r3,r2
     69c:	e0bffd17 	ldw	r2,-12(fp)
     6a0:	188b883a 	add	r5,r3,r2
     6a4:	e0fffe17 	ldw	r3,-8(fp)
     6a8:	1804d7fa 	srli	r2,r3,31
     6ac:	10c5883a 	add	r2,r2,r3
     6b0:	1005d07a 	srai	r2,r2,1
     6b4:	1007883a 	mov	r3,r2
     6b8:	e0bffd17 	ldw	r2,-12(fp)
     6bc:	10cfc83a 	sub	r7,r2,r3
     6c0:	e0bfff0f 	ldh	r2,-4(fp)
     6c4:	d8800015 	stw	r2,0(sp)
     6c8:	e13ffa17 	ldw	r4,-24(fp)
     6cc:	e1bff917 	ldw	r6,-28(fp)
     6d0:	000071c0 	call	71c <VGA_line>
    VGA_line (spring_x_2,   y_mean - height/2,  x2,           y_mean           ,  color);
     6d4:	e0fffe17 	ldw	r3,-8(fp)
     6d8:	1804d7fa 	srli	r2,r3,31
     6dc:	10c5883a 	add	r2,r2,r3
     6e0:	1005d07a 	srai	r2,r2,1
     6e4:	1007883a 	mov	r3,r2
     6e8:	e0bffd17 	ldw	r2,-12(fp)
     6ec:	10cbc83a 	sub	r5,r2,r3
     6f0:	e0bfff0f 	ldh	r2,-4(fp)
     6f4:	d8800015 	stw	r2,0(sp)
     6f8:	e13ff917 	ldw	r4,-28(fp)
     6fc:	e1bffc17 	ldw	r6,-16(fp)
     700:	e1fffd17 	ldw	r7,-12(fp)
     704:	000071c0 	call	71c <VGA_line>
}
     708:	e037883a 	mov	sp,fp
     70c:	dfc00117 	ldw	ra,4(sp)
     710:	df000017 	ldw	fp,0(sp)
     714:	dec00204 	addi	sp,sp,8
     718:	f800283a 	ret

0000071c <VGA_line>:



 // Bresenham's line algorithm c
 void VGA_line(int x0 ,int y0, int x1, int y1, short pixel_color)
 {
     71c:	deffef04 	addi	sp,sp,-68
     720:	dfc01015 	stw	ra,64(sp)
     724:	df000f15 	stw	fp,60(sp)
     728:	df000f04 	addi	fp,sp,60
     72c:	e13ff915 	stw	r4,-28(fp)
     730:	e17ffa15 	stw	r5,-24(fp)
     734:	e1bffb15 	stw	r6,-20(fp)
     738:	e1fffc15 	stw	r7,-16(fp)
     73c:	e0800217 	ldw	r2,8(fp)
     740:	e0bffd0d 	sth	r2,-12(fp)
    int dy =  abs (y1 - y0);
     744:	e0fffc17 	ldw	r3,-16(fp)
     748:	e0bffa17 	ldw	r2,-24(fp)
     74c:	1889c83a 	sub	r4,r3,r2
     750:	0000b180 	call	b18 <abs>
     754:	e0bff815 	stw	r2,-32(fp)
    int dx = -abs (x1 - x0);
     758:	e0fffb17 	ldw	r3,-20(fp)
     75c:	e0bff917 	ldw	r2,-28(fp)
     760:	1889c83a 	sub	r4,r3,r2
     764:	0000b180 	call	b18 <abs>
     768:	0085c83a 	sub	r2,zero,r2
     76c:	e0bff715 	stw	r2,-36(fp)
    int sx = y0 < y1 ? 1 : -1;
     770:	e0fffa17 	ldw	r3,-24(fp)
     774:	e0bffc17 	ldw	r2,-16(fp)
     778:	1880030e 	bge	r3,r2,788 <VGA_line+0x6c>
     77c:	00800044 	movi	r2,1
     780:	e0bfff15 	stw	r2,-4(fp)
     784:	00000206 	br	790 <VGA_line+0x74>
     788:	00bfffc4 	movi	r2,-1
     78c:	e0bfff15 	stw	r2,-4(fp)
     790:	e0bfff17 	ldw	r2,-4(fp)
     794:	e0bff615 	stw	r2,-40(fp)
    int sy = x0 < x1 ? 1 : -1;
     798:	e0fff917 	ldw	r3,-28(fp)
     79c:	e0bffb17 	ldw	r2,-20(fp)
     7a0:	1880030e 	bge	r3,r2,7b0 <VGA_line+0x94>
     7a4:	00800044 	movi	r2,1
     7a8:	e0bffe15 	stw	r2,-8(fp)
     7ac:	00000206 	br	7b8 <VGA_line+0x9c>
     7b0:	00bfffc4 	movi	r2,-1
     7b4:	e0bffe15 	stw	r2,-8(fp)
     7b8:	e0bffe17 	ldw	r2,-8(fp)
     7bc:	e0bff515 	stw	r2,-44(fp)
    int err = dy + dx, e2; /* error value e_xy */
     7c0:	e0fff817 	ldw	r3,-32(fp)
     7c4:	e0bff717 	ldw	r2,-36(fp)
     7c8:	1885883a 	add	r2,r3,r2
     7cc:	e0bff415 	stw	r2,-48(fp)
    int offset;
    volatile short * pixel_buffer = (short *) 0x08000000;   // VGA pixel buffer address
     7d0:	00820034 	movhi	r2,2048
     7d4:	e0bff115 	stw	r2,-60(fp)
     7d8:	00000006 	br	7dc <VGA_line+0xc0>
    for (;;)
    {  /* loop */
        offset = (y0 << 9) + (x0>>1);
     7dc:	e0bffa17 	ldw	r2,-24(fp)
     7e0:	1006927a 	slli	r3,r2,9
     7e4:	e0bff917 	ldw	r2,-28(fp)
     7e8:	1005d07a 	srai	r2,r2,1
     7ec:	1885883a 	add	r2,r3,r2
     7f0:	e0bff215 	stw	r2,-56(fp)
        *(pixel_buffer + offset) = pixel_color; // compute halfword address, set pixel
     7f4:	e0bff217 	ldw	r2,-56(fp)
     7f8:	1085883a 	add	r2,r2,r2
     7fc:	1007883a 	mov	r3,r2
     800:	e0bff117 	ldw	r2,-60(fp)
     804:	1887883a 	add	r3,r3,r2
     808:	e0bffd0b 	ldhu	r2,-12(fp)
     80c:	1880000d 	sth	r2,0(r3)

        if (y0 == y1 && x0 == x1)
     810:	e0fffa17 	ldw	r3,-24(fp)
     814:	e0bffc17 	ldw	r2,-16(fp)
     818:	1880031e 	bne	r3,r2,828 <VGA_line+0x10c>
     81c:	e0fff917 	ldw	r3,-28(fp)
     820:	e0bffb17 	ldw	r2,-20(fp)
     824:	18801a26 	beq	r3,r2,890 <VGA_line+0x174>
            break;

        e2 = 2 * err;
     828:	e0bff417 	ldw	r2,-48(fp)
     82c:	1085883a 	add	r2,r2,r2
     830:	e0bff315 	stw	r2,-52(fp)

        if (e2 >= dx) { err += dx; y0 += sx; } /* e_xy+e_x > 0 */
     834:	e0fff317 	ldw	r3,-52(fp)
     838:	e0bff717 	ldw	r2,-36(fp)
     83c:	18800816 	blt	r3,r2,860 <VGA_line+0x144>
     840:	e0fff417 	ldw	r3,-48(fp)
     844:	e0bff717 	ldw	r2,-36(fp)
     848:	1885883a 	add	r2,r3,r2
     84c:	e0bff415 	stw	r2,-48(fp)
     850:	e0fffa17 	ldw	r3,-24(fp)
     854:	e0bff617 	ldw	r2,-40(fp)
     858:	1885883a 	add	r2,r3,r2
     85c:	e0bffa15 	stw	r2,-24(fp)
        if (e2 <= dy) { err += dy; x0 += sy; } /* e_xy+e_y < 0 */
     860:	e0fff317 	ldw	r3,-52(fp)
     864:	e0bff817 	ldw	r2,-32(fp)
     868:	10ffdc16 	blt	r2,r3,7dc <VGA_line+0xc0>
     86c:	e0fff417 	ldw	r3,-48(fp)
     870:	e0bff817 	ldw	r2,-32(fp)
     874:	1885883a 	add	r2,r3,r2
     878:	e0bff415 	stw	r2,-48(fp)
     87c:	e0fff917 	ldw	r3,-28(fp)
     880:	e0bff517 	ldw	r2,-44(fp)
     884:	1885883a 	add	r2,r3,r2
     888:	e0bff915 	stw	r2,-28(fp)
    }
     88c:	003fd306 	br	7dc <VGA_line+0xc0>
 //        if (e2 <= dx) { err += dx; y0 += sy; } /* e_xy+e_y < 0 */
 //    }



 }
     890:	e037883a 	mov	sp,fp
     894:	dfc00117 	ldw	ra,4(sp)
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00204 	addi	sp,sp,8
     8a0:	f800283a 	ret

000008a4 <VGA_point>:

/*********************************************************************
 * Draw a point on the VGA monitor
 ********************************************************************/
void VGA_point(int x1, int y1, short pixel_color)
{
     8a4:	defffa04 	addi	sp,sp,-24
     8a8:	df000515 	stw	fp,20(sp)
     8ac:	df000504 	addi	fp,sp,20
     8b0:	e13ffd15 	stw	r4,-12(fp)
     8b4:	e17ffe15 	stw	r5,-8(fp)
     8b8:	e1bfff0d 	sth	r6,-4(fp)
    /* Declare volatile pointer to pixel buffer
    (volatile means that IO load and store instructions will be used to
    access these pointer locations, instead of regular memory loads and
    stores) */
    // VGA pixel buffer address
    volatile short * pixel_buffer = (short *) 0x08000000;
     8bc:	00820034 	movhi	r2,2048
     8c0:	e0bffb15 	stw	r2,-20(fp)

    /* assume that the box coordinates are valid */
    offset = (y1 << 9) + (x1 >> 1);
     8c4:	e0bffe17 	ldw	r2,-8(fp)
     8c8:	1006927a 	slli	r3,r2,9
     8cc:	e0bffd17 	ldw	r2,-12(fp)
     8d0:	1005d07a 	srai	r2,r2,1
     8d4:	1885883a 	add	r2,r3,r2
     8d8:	e0bffc15 	stw	r2,-16(fp)
    //  new_color = (current_pixel_color & 0x00ff) | (pixel_color & 0xff00);
    // else
    //  new_color = (current_pixel_color & 0xff00) | (pixel_color &     0x00ff);

    // compute halfword address, set 2 pixel
    *(pixel_buffer + offset) = pixel_color;
     8dc:	e0bffc17 	ldw	r2,-16(fp)
     8e0:	1085883a 	add	r2,r2,r2
     8e4:	1007883a 	mov	r3,r2
     8e8:	e0bffb17 	ldw	r2,-20(fp)
     8ec:	1887883a 	add	r3,r3,r2
     8f0:	e0bfff0b 	ldhu	r2,-4(fp)
     8f4:	1880000d 	sth	r2,0(r3)
}
     8f8:	e037883a 	mov	sp,fp
     8fc:	df000017 	ldw	fp,0(sp)
     900:	dec00104 	addi	sp,sp,4
     904:	f800283a 	ret

00000908 <VGA_box>:

/****************************************************************************************
 * Draw a filled rectangle on the VGA monitor
****************************************************************************************/
void VGA_box(int x1, int y1, int x2, int y2, short pixel_color)
{
     908:	defff604 	addi	sp,sp,-40
     90c:	df000915 	stw	fp,36(sp)
     910:	df000904 	addi	fp,sp,36
     914:	e13ffb15 	stw	r4,-20(fp)
     918:	e17ffc15 	stw	r5,-16(fp)
     91c:	e1bffd15 	stw	r6,-12(fp)
     920:	e1fffe15 	stw	r7,-8(fp)
     924:	e0800117 	ldw	r2,4(fp)
     928:	e0bfff0d 	sth	r2,-4(fp)
    int offset, row, col;
    /* Declare volatile pointer to pixel buffer (volatile means that IO load
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile short * pixel_buffer = (short *) 0x08000000;   // VGA pixel buffer address
     92c:	00820034 	movhi	r2,2048
     930:	e0bff715 	stw	r2,-36(fp)

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
     934:	e0bffc17 	ldw	r2,-16(fp)
     938:	e0bff915 	stw	r2,-28(fp)
     93c:	00001906 	br	9a4 <VGA_box+0x9c>
    {
        col = x1;
     940:	e0bffb17 	ldw	r2,-20(fp)
     944:	e0bff815 	stw	r2,-32(fp)
        while (col <= x2)
     948:	00001006 	br	98c <VGA_box+0x84>
        {
            offset = (row << 9) + (col>>1);
     94c:	e0bff917 	ldw	r2,-28(fp)
     950:	1006927a 	slli	r3,r2,9
     954:	e0bff817 	ldw	r2,-32(fp)
     958:	1005d07a 	srai	r2,r2,1
     95c:	1885883a 	add	r2,r3,r2
     960:	e0bffa15 	stw	r2,-24(fp)
            *(pixel_buffer + offset) = pixel_color; // compute halfword address, set pixel
     964:	e0bffa17 	ldw	r2,-24(fp)
     968:	1085883a 	add	r2,r2,r2
     96c:	1007883a 	mov	r3,r2
     970:	e0bff717 	ldw	r2,-36(fp)
     974:	1887883a 	add	r3,r3,r2
     978:	e0bfff0b 	ldhu	r2,-4(fp)
     97c:	1880000d 	sth	r2,0(r3)
            ++col;
     980:	e0bff817 	ldw	r2,-32(fp)
     984:	10800044 	addi	r2,r2,1
     988:	e0bff815 	stw	r2,-32(fp)

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
    {
        col = x1;
        while (col <= x2)
     98c:	e0fff817 	ldw	r3,-32(fp)
     990:	e0bffd17 	ldw	r2,-12(fp)
     994:	10ffed0e 	bge	r2,r3,94c <VGA_box+0x44>
       and store instructions will be used to access these pointer locations,
       instead of regular memory loads and stores) */
    volatile short * pixel_buffer = (short *) 0x08000000;   // VGA pixel buffer address

    /* assume that the box coordinates are valid */
    for (row = y1; row <= y2; row++)
     998:	e0bff917 	ldw	r2,-28(fp)
     99c:	10800044 	addi	r2,r2,1
     9a0:	e0bff915 	stw	r2,-28(fp)
     9a4:	e0fff917 	ldw	r3,-28(fp)
     9a8:	e0bffe17 	ldw	r2,-8(fp)
     9ac:	10ffe40e 	bge	r2,r3,940 <VGA_box+0x38>
            offset = (row << 9) + (col>>1);
            *(pixel_buffer + offset) = pixel_color; // compute halfword address, set pixel
            ++col;
        }
    }
}
     9b0:	e037883a 	mov	sp,fp
     9b4:	df000017 	ldw	fp,0(sp)
     9b8:	dec00104 	addi	sp,sp,4
     9bc:	f800283a 	ret

000009c0 <VGA_circle>:

void VGA_circle (int xm, int ym, int r, short color)
{
     9c0:	defff704 	addi	sp,sp,-36
     9c4:	dfc00815 	stw	ra,32(sp)
     9c8:	df000715 	stw	fp,28(sp)
     9cc:	df000704 	addi	fp,sp,28
     9d0:	e13ffc15 	stw	r4,-16(fp)
     9d4:	e17ffd15 	stw	r5,-12(fp)
     9d8:	e1bffe15 	stw	r6,-8(fp)
     9dc:	e1ffff0d 	sth	r7,-4(fp)
   int x = -r, y = 0, err = 2-2*r; /* II. Quadrant */ 
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	0085c83a 	sub	r2,zero,r2
     9e8:	e0bffb15 	stw	r2,-20(fp)
     9ec:	e03ffa15 	stw	zero,-24(fp)
     9f0:	e0bffe17 	ldw	r2,-8(fp)
     9f4:	1085883a 	add	r2,r2,r2
     9f8:	1007883a 	mov	r3,r2
     9fc:	00800084 	movi	r2,2
     a00:	10c5c83a 	sub	r2,r2,r3
     a04:	e0bff915 	stw	r2,-28(fp)
   do {
      VGA_point (xm-x, ym+y, color); /*   I. Quadrant */
     a08:	e0fffc17 	ldw	r3,-16(fp)
     a0c:	e0bffb17 	ldw	r2,-20(fp)
     a10:	1889c83a 	sub	r4,r3,r2
     a14:	e0fffd17 	ldw	r3,-12(fp)
     a18:	e0bffa17 	ldw	r2,-24(fp)
     a1c:	188b883a 	add	r5,r3,r2
     a20:	e1bfff0f 	ldh	r6,-4(fp)
     a24:	00008a40 	call	8a4 <VGA_point>
      VGA_point (xm-y, ym-x, color); /*  II. Quadrant */
     a28:	e0fffc17 	ldw	r3,-16(fp)
     a2c:	e0bffa17 	ldw	r2,-24(fp)
     a30:	1889c83a 	sub	r4,r3,r2
     a34:	e0fffd17 	ldw	r3,-12(fp)
     a38:	e0bffb17 	ldw	r2,-20(fp)
     a3c:	188bc83a 	sub	r5,r3,r2
     a40:	e1bfff0f 	ldh	r6,-4(fp)
     a44:	00008a40 	call	8a4 <VGA_point>
      VGA_point (xm+x, ym-y, color); /* III. Quadrant */
     a48:	e0fffc17 	ldw	r3,-16(fp)
     a4c:	e0bffb17 	ldw	r2,-20(fp)
     a50:	1889883a 	add	r4,r3,r2
     a54:	e0fffd17 	ldw	r3,-12(fp)
     a58:	e0bffa17 	ldw	r2,-24(fp)
     a5c:	188bc83a 	sub	r5,r3,r2
     a60:	e1bfff0f 	ldh	r6,-4(fp)
     a64:	00008a40 	call	8a4 <VGA_point>
      VGA_point (xm+y, ym+x, color); /*  IV. Quadrant */
     a68:	e0fffc17 	ldw	r3,-16(fp)
     a6c:	e0bffa17 	ldw	r2,-24(fp)
     a70:	1889883a 	add	r4,r3,r2
     a74:	e0fffd17 	ldw	r3,-12(fp)
     a78:	e0bffb17 	ldw	r2,-20(fp)
     a7c:	188b883a 	add	r5,r3,r2
     a80:	e1bfff0f 	ldh	r6,-4(fp)
     a84:	00008a40 	call	8a4 <VGA_point>
      r = err;
     a88:	e0bff917 	ldw	r2,-28(fp)
     a8c:	e0bffe15 	stw	r2,-8(fp)
      if (r >  x) err += ++x*2+1; /* e_xy+e_x > 0 */
     a90:	e0fffe17 	ldw	r3,-8(fp)
     a94:	e0bffb17 	ldw	r2,-20(fp)
     a98:	10c00a0e 	bge	r2,r3,ac4 <VGA_circle+0x104>
     a9c:	e0bffb17 	ldw	r2,-20(fp)
     aa0:	10800044 	addi	r2,r2,1
     aa4:	e0bffb15 	stw	r2,-20(fp)
     aa8:	e0bffb17 	ldw	r2,-20(fp)
     aac:	1085883a 	add	r2,r2,r2
     ab0:	1007883a 	mov	r3,r2
     ab4:	e0bff917 	ldw	r2,-28(fp)
     ab8:	1885883a 	add	r2,r3,r2
     abc:	10800044 	addi	r2,r2,1
     ac0:	e0bff915 	stw	r2,-28(fp)
      if (r <= y) err += ++y*2+1; /* e_xy+e_y < 0 */
     ac4:	e0fffe17 	ldw	r3,-8(fp)
     ac8:	e0bffa17 	ldw	r2,-24(fp)
     acc:	10c00a16 	blt	r2,r3,af8 <VGA_circle+0x138>
     ad0:	e0bffa17 	ldw	r2,-24(fp)
     ad4:	10800044 	addi	r2,r2,1
     ad8:	e0bffa15 	stw	r2,-24(fp)
     adc:	e0bffa17 	ldw	r2,-24(fp)
     ae0:	1085883a 	add	r2,r2,r2
     ae4:	1007883a 	mov	r3,r2
     ae8:	e0bff917 	ldw	r2,-28(fp)
     aec:	1885883a 	add	r2,r3,r2
     af0:	10800044 	addi	r2,r2,1
     af4:	e0bff915 	stw	r2,-28(fp)
   } while (x < 0);
     af8:	e0bffb17 	ldw	r2,-20(fp)
     afc:	1004803a 	cmplt	r2,r2,zero
     b00:	103fc11e 	bne	r2,zero,a08 <VGA_circle+0x48>
}
     b04:	e037883a 	mov	sp,fp
     b08:	dfc00117 	ldw	ra,4(sp)
     b0c:	df000017 	ldw	fp,0(sp)
     b10:	dec00204 	addi	sp,sp,8
     b14:	f800283a 	ret

00000b18 <abs>:

static int abs(int value)
{
     b18:	defffd04 	addi	sp,sp,-12
     b1c:	df000215 	stw	fp,8(sp)
     b20:	df000204 	addi	fp,sp,8
     b24:	e13ffe15 	stw	r4,-8(fp)
  if (value < 0) return -value;
     b28:	e0bffe17 	ldw	r2,-8(fp)
     b2c:	1004403a 	cmpge	r2,r2,zero
     b30:	1000041e 	bne	r2,zero,b44 <abs+0x2c>
     b34:	e0bffe17 	ldw	r2,-8(fp)
     b38:	0085c83a 	sub	r2,zero,r2
     b3c:	e0bfff15 	stw	r2,-4(fp)
     b40:	00000206 	br	b4c <abs+0x34>
  else            return  value;
     b44:	e0bffe17 	ldw	r2,-8(fp)
     b48:	e0bfff15 	stw	r2,-4(fp)
     b4c:	e0bfff17 	ldw	r2,-4(fp)
}
     b50:	e037883a 	mov	sp,fp
     b54:	df000017 	ldw	fp,0(sp)
     b58:	dec00104 	addi	sp,sp,4
     b5c:	f800283a 	ret

00000b60 <_puts_r>:
     b60:	defffd04 	addi	sp,sp,-12
     b64:	dc000015 	stw	r16,0(sp)
     b68:	2021883a 	mov	r16,r4
     b6c:	2809883a 	mov	r4,r5
     b70:	dfc00215 	stw	ra,8(sp)
     b74:	dc400115 	stw	r17,4(sp)
     b78:	2823883a 	mov	r17,r5
     b7c:	0000c040 	call	c04 <strlen>
     b80:	80c00217 	ldw	r3,8(r16)
     b84:	02000034 	movhi	r8,0
     b88:	42030904 	addi	r8,r8,3108
     b8c:	880d883a 	mov	r6,r17
     b90:	100f883a 	mov	r7,r2
     b94:	8009883a 	mov	r4,r16
     b98:	180b883a 	mov	r5,r3
     b9c:	1a000115 	stw	r8,4(r3)
     ba0:	403ee83a 	callr	r8
     ba4:	047fffc4 	movi	r17,-1
     ba8:	8009883a 	mov	r4,r16
     bac:	01800034 	movhi	r6,0
     bb0:	3189e504 	addi	r6,r6,10132
     bb4:	01c00044 	movi	r7,1
     bb8:	1440071e 	bne	r2,r17,bd8 <_puts_r+0x78>
     bbc:	00ffffc4 	movi	r3,-1
     bc0:	1805883a 	mov	r2,r3
     bc4:	dfc00217 	ldw	ra,8(sp)
     bc8:	dc400117 	ldw	r17,4(sp)
     bcc:	dc000017 	ldw	r16,0(sp)
     bd0:	dec00304 	addi	sp,sp,12
     bd4:	f800283a 	ret
     bd8:	81400217 	ldw	r5,8(r16)
     bdc:	28c00117 	ldw	r3,4(r5)
     be0:	183ee83a 	callr	r3
     be4:	0007883a 	mov	r3,zero
     be8:	147ff51e 	bne	r2,r17,bc0 <_puts_r+0x60>
     bec:	003ff306 	br	bbc <_puts_r+0x5c>

00000bf0 <puts>:
     bf0:	00800034 	movhi	r2,0
     bf4:	108ade04 	addi	r2,r2,11128
     bf8:	200b883a 	mov	r5,r4
     bfc:	11000017 	ldw	r4,0(r2)
     c00:	0000b601 	jmpi	b60 <_puts_r>

00000c04 <strlen>:
     c04:	20800007 	ldb	r2,0(r4)
     c08:	10000526 	beq	r2,zero,c20 <strlen+0x1c>
     c0c:	2007883a 	mov	r3,r4
     c10:	18c00044 	addi	r3,r3,1
     c14:	18800007 	ldb	r2,0(r3)
     c18:	103ffd1e 	bne	r2,zero,c10 <strlen+0xc>
     c1c:	1905c83a 	sub	r2,r3,r4
     c20:	f800283a 	ret

00000c24 <__sfvwrite_small_dev>:
     c24:	2880000b 	ldhu	r2,0(r5)
     c28:	defffa04 	addi	sp,sp,-24
     c2c:	dcc00315 	stw	r19,12(sp)
     c30:	1080020c 	andi	r2,r2,8
     c34:	dc800215 	stw	r18,8(sp)
     c38:	dc400115 	stw	r17,4(sp)
     c3c:	dfc00515 	stw	ra,20(sp)
     c40:	dd000415 	stw	r20,16(sp)
     c44:	dc000015 	stw	r16,0(sp)
     c48:	2825883a 	mov	r18,r5
     c4c:	2027883a 	mov	r19,r4
     c50:	3023883a 	mov	r17,r6
     c54:	10002026 	beq	r2,zero,cd8 <__sfvwrite_small_dev+0xb4>
     c58:	2940008f 	ldh	r5,2(r5)
     c5c:	28000f16 	blt	r5,zero,c9c <__sfvwrite_small_dev+0x78>
     c60:	01c01b0e 	bge	zero,r7,cd0 <__sfvwrite_small_dev+0xac>
     c64:	3821883a 	mov	r16,r7
     c68:	05010004 	movi	r20,1024
     c6c:	00000206 	br	c78 <__sfvwrite_small_dev+0x54>
     c70:	0400170e 	bge	zero,r16,cd0 <__sfvwrite_small_dev+0xac>
     c74:	9140008f 	ldh	r5,2(r18)
     c78:	880d883a 	mov	r6,r17
     c7c:	9809883a 	mov	r4,r19
     c80:	800f883a 	mov	r7,r16
     c84:	a400010e 	bge	r20,r16,c8c <__sfvwrite_small_dev+0x68>
     c88:	01c10004 	movi	r7,1024
     c8c:	0000ce00 	call	ce0 <_write_r>
     c90:	88a3883a 	add	r17,r17,r2
     c94:	80a1c83a 	sub	r16,r16,r2
     c98:	00bff516 	blt	zero,r2,c70 <__sfvwrite_small_dev+0x4c>
     c9c:	9080000b 	ldhu	r2,0(r18)
     ca0:	00ffffc4 	movi	r3,-1
     ca4:	10801014 	ori	r2,r2,64
     ca8:	9080000d 	sth	r2,0(r18)
     cac:	1805883a 	mov	r2,r3
     cb0:	dfc00517 	ldw	ra,20(sp)
     cb4:	dd000417 	ldw	r20,16(sp)
     cb8:	dcc00317 	ldw	r19,12(sp)
     cbc:	dc800217 	ldw	r18,8(sp)
     cc0:	dc400117 	ldw	r17,4(sp)
     cc4:	dc000017 	ldw	r16,0(sp)
     cc8:	dec00604 	addi	sp,sp,24
     ccc:	f800283a 	ret
     cd0:	0007883a 	mov	r3,zero
     cd4:	003ff506 	br	cac <__sfvwrite_small_dev+0x88>
     cd8:	00ffffc4 	movi	r3,-1
     cdc:	003ff306 	br	cac <__sfvwrite_small_dev+0x88>

00000ce0 <_write_r>:
     ce0:	defffd04 	addi	sp,sp,-12
     ce4:	dc000015 	stw	r16,0(sp)
     ce8:	04000034 	movhi	r16,0
     cec:	840bc204 	addi	r16,r16,12040
     cf0:	dc400115 	stw	r17,4(sp)
     cf4:	80000015 	stw	zero,0(r16)
     cf8:	2023883a 	mov	r17,r4
     cfc:	2809883a 	mov	r4,r5
     d00:	300b883a 	mov	r5,r6
     d04:	380d883a 	mov	r6,r7
     d08:	dfc00215 	stw	ra,8(sp)
     d0c:	0000ed00 	call	ed0 <write>
     d10:	1007883a 	mov	r3,r2
     d14:	00bfffc4 	movi	r2,-1
     d18:	18800626 	beq	r3,r2,d34 <_write_r+0x54>
     d1c:	1805883a 	mov	r2,r3
     d20:	dfc00217 	ldw	ra,8(sp)
     d24:	dc400117 	ldw	r17,4(sp)
     d28:	dc000017 	ldw	r16,0(sp)
     d2c:	dec00304 	addi	sp,sp,12
     d30:	f800283a 	ret
     d34:	80800017 	ldw	r2,0(r16)
     d38:	103ff826 	beq	r2,zero,d1c <_write_r+0x3c>
     d3c:	88800015 	stw	r2,0(r17)
     d40:	1805883a 	mov	r2,r3
     d44:	dfc00217 	ldw	ra,8(sp)
     d48:	dc400117 	ldw	r17,4(sp)
     d4c:	dc000017 	ldw	r16,0(sp)
     d50:	dec00304 	addi	sp,sp,12
     d54:	f800283a 	ret

00000d58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     d58:	defffe04 	addi	sp,sp,-8
     d5c:	dfc00115 	stw	ra,4(sp)
     d60:	df000015 	stw	fp,0(sp)
     d64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     d68:	01000034 	movhi	r4,0
     d6c:	210ae604 	addi	r4,r4,11160
     d70:	01400034 	movhi	r5,0
     d74:	294a0a04 	addi	r5,r5,10280
     d78:	01800034 	movhi	r6,0
     d7c:	318ae604 	addi	r6,r6,11160
     d80:	0000dd80 	call	dd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     d84:	01000034 	movhi	r4,0
     d88:	21000804 	addi	r4,r4,32
     d8c:	01400034 	movhi	r5,0
     d90:	29400804 	addi	r5,r5,32
     d94:	01800034 	movhi	r6,0
     d98:	31800804 	addi	r6,r6,32
     d9c:	0000dd80 	call	dd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     da0:	01000034 	movhi	r4,0
     da4:	2109d004 	addi	r4,r4,10048
     da8:	01400034 	movhi	r5,0
     dac:	2949d004 	addi	r5,r5,10048
     db0:	01800034 	movhi	r6,0
     db4:	318a0a04 	addi	r6,r6,10280
     db8:	0000dd80 	call	dd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     dbc:	0001b840 	call	1b84 <alt_dcache_flush_all>
  alt_icache_flush_all();
     dc0:	0001d740 	call	1d74 <alt_icache_flush_all>
}
     dc4:	e037883a 	mov	sp,fp
     dc8:	dfc00117 	ldw	ra,4(sp)
     dcc:	df000017 	ldw	fp,0(sp)
     dd0:	dec00204 	addi	sp,sp,8
     dd4:	f800283a 	ret

00000dd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     dd8:	defffc04 	addi	sp,sp,-16
     ddc:	df000315 	stw	fp,12(sp)
     de0:	df000304 	addi	fp,sp,12
     de4:	e13ffd15 	stw	r4,-12(fp)
     de8:	e17ffe15 	stw	r5,-8(fp)
     dec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     df0:	e0fffe17 	ldw	r3,-8(fp)
     df4:	e0bffd17 	ldw	r2,-12(fp)
     df8:	18800e26 	beq	r3,r2,e34 <alt_load_section+0x5c>
  {
    while( to != end )
     dfc:	00000a06 	br	e28 <alt_load_section+0x50>
    {
      *to++ = *from++;
     e00:	e0bffd17 	ldw	r2,-12(fp)
     e04:	10c00017 	ldw	r3,0(r2)
     e08:	e0bffe17 	ldw	r2,-8(fp)
     e0c:	10c00015 	stw	r3,0(r2)
     e10:	e0bffe17 	ldw	r2,-8(fp)
     e14:	10800104 	addi	r2,r2,4
     e18:	e0bffe15 	stw	r2,-8(fp)
     e1c:	e0bffd17 	ldw	r2,-12(fp)
     e20:	10800104 	addi	r2,r2,4
     e24:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     e28:	e0fffe17 	ldw	r3,-8(fp)
     e2c:	e0bfff17 	ldw	r2,-4(fp)
     e30:	18bff31e 	bne	r3,r2,e00 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     e34:	e037883a 	mov	sp,fp
     e38:	df000017 	ldw	fp,0(sp)
     e3c:	dec00104 	addi	sp,sp,4
     e40:	f800283a 	ret

00000e44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     e44:	defffd04 	addi	sp,sp,-12
     e48:	dfc00215 	stw	ra,8(sp)
     e4c:	df000115 	stw	fp,4(sp)
     e50:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     e54:	0009883a 	mov	r4,zero
     e58:	00010500 	call	1050 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     e5c:	00010840 	call	1084 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     e60:	01000034 	movhi	r4,0
     e64:	2109e604 	addi	r4,r4,10136
     e68:	01400034 	movhi	r5,0
     e6c:	2949e604 	addi	r5,r5,10136
     e70:	01800034 	movhi	r6,0
     e74:	3189e604 	addi	r6,r6,10136
     e78:	0001e680 	call	1e68 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     e7c:	d120e517 	ldw	r4,-31852(gp)
     e80:	d160e617 	ldw	r5,-31848(gp)
     e84:	d1a0e717 	ldw	r6,-31844(gp)
     e88:	000005c0 	call	5c <main>
     e8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     e90:	01000044 	movi	r4,1
     e94:	0001a280 	call	1a28 <close>
  exit (result);
     e98:	e13fff17 	ldw	r4,-4(fp)
     e9c:	000248c0 	call	248c <exit>

00000ea0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
     ea0:	defffd04 	addi	sp,sp,-12
     ea4:	dfc00215 	stw	ra,8(sp)
     ea8:	df000115 	stw	fp,4(sp)
     eac:	df000104 	addi	fp,sp,4
     eb0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
     eb4:	e13fff17 	ldw	r4,-4(fp)
     eb8:	00018fc0 	call	18fc <alt_busy_sleep>
}
     ebc:	e037883a 	mov	sp,fp
     ec0:	dfc00117 	ldw	ra,4(sp)
     ec4:	df000017 	ldw	fp,0(sp)
     ec8:	dec00204 	addi	sp,sp,8
     ecc:	f800283a 	ret

00000ed0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
     ed0:	defff704 	addi	sp,sp,-36
     ed4:	dfc00815 	stw	ra,32(sp)
     ed8:	df000715 	stw	fp,28(sp)
     edc:	df000704 	addi	fp,sp,28
     ee0:	e13ffb15 	stw	r4,-20(fp)
     ee4:	e17ffc15 	stw	r5,-16(fp)
     ee8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
     eec:	e0bffb17 	ldw	r2,-20(fp)
     ef0:	1004803a 	cmplt	r2,r2,zero
     ef4:	1000081e 	bne	r2,zero,f18 <write+0x48>
     ef8:	e0bffb17 	ldw	r2,-20(fp)
     efc:	10800324 	muli	r2,r2,12
     f00:	1007883a 	mov	r3,r2
     f04:	00800034 	movhi	r2,0
     f08:	108a7e04 	addi	r2,r2,10744
     f0c:	1887883a 	add	r3,r3,r2
     f10:	e0ffff15 	stw	r3,-4(fp)
     f14:	00000106 	br	f1c <write+0x4c>
     f18:	e03fff15 	stw	zero,-4(fp)
     f1c:	e0bfff17 	ldw	r2,-4(fp)
     f20:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
     f24:	e0bffa17 	ldw	r2,-24(fp)
     f28:	1005003a 	cmpeq	r2,r2,zero
     f2c:	1000241e 	bne	r2,zero,fc0 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
     f30:	e0bffa17 	ldw	r2,-24(fp)
     f34:	10800217 	ldw	r2,8(r2)
     f38:	108000cc 	andi	r2,r2,3
     f3c:	1005003a 	cmpeq	r2,r2,zero
     f40:	10001a1e 	bne	r2,zero,fac <write+0xdc>
     f44:	e0bffa17 	ldw	r2,-24(fp)
     f48:	10800017 	ldw	r2,0(r2)
     f4c:	10800617 	ldw	r2,24(r2)
     f50:	1005003a 	cmpeq	r2,r2,zero
     f54:	1000151e 	bne	r2,zero,fac <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
     f58:	e0bffa17 	ldw	r2,-24(fp)
     f5c:	10800017 	ldw	r2,0(r2)
     f60:	10800617 	ldw	r2,24(r2)
     f64:	e17ffc17 	ldw	r5,-16(fp)
     f68:	e1bffd17 	ldw	r6,-12(fp)
     f6c:	e13ffa17 	ldw	r4,-24(fp)
     f70:	103ee83a 	callr	r2
     f74:	e0bff915 	stw	r2,-28(fp)
     f78:	e0bff917 	ldw	r2,-28(fp)
     f7c:	1004403a 	cmpge	r2,r2,zero
     f80:	1000071e 	bne	r2,zero,fa0 <write+0xd0>
      {
        ALT_ERRNO = -rval;
     f84:	0000ff00 	call	ff0 <alt_get_errno>
     f88:	e0fff917 	ldw	r3,-28(fp)
     f8c:	00c7c83a 	sub	r3,zero,r3
     f90:	10c00015 	stw	r3,0(r2)
        return -1;
     f94:	00bfffc4 	movi	r2,-1
     f98:	e0bffe15 	stw	r2,-8(fp)
     f9c:	00000e06 	br	fd8 <write+0x108>
      }
      return rval;
     fa0:	e0bff917 	ldw	r2,-28(fp)
     fa4:	e0bffe15 	stw	r2,-8(fp)
     fa8:	00000b06 	br	fd8 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
     fac:	0000ff00 	call	ff0 <alt_get_errno>
     fb0:	1007883a 	mov	r3,r2
     fb4:	00800344 	movi	r2,13
     fb8:	18800015 	stw	r2,0(r3)
     fbc:	00000406 	br	fd0 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
     fc0:	0000ff00 	call	ff0 <alt_get_errno>
     fc4:	1007883a 	mov	r3,r2
     fc8:	00801444 	movi	r2,81
     fcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
     fd0:	00bfffc4 	movi	r2,-1
     fd4:	e0bffe15 	stw	r2,-8(fp)
     fd8:	e0bffe17 	ldw	r2,-8(fp)
}
     fdc:	e037883a 	mov	sp,fp
     fe0:	dfc00117 	ldw	ra,4(sp)
     fe4:	df000017 	ldw	fp,0(sp)
     fe8:	dec00204 	addi	sp,sp,8
     fec:	f800283a 	ret

00000ff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     ff0:	defffd04 	addi	sp,sp,-12
     ff4:	dfc00215 	stw	ra,8(sp)
     ff8:	df000115 	stw	fp,4(sp)
     ffc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1000:	00800034 	movhi	r2,0
    1004:	108ae504 	addi	r2,r2,11156
    1008:	10800017 	ldw	r2,0(r2)
    100c:	1005003a 	cmpeq	r2,r2,zero
    1010:	1000061e 	bne	r2,zero,102c <alt_get_errno+0x3c>
    1014:	00800034 	movhi	r2,0
    1018:	108ae504 	addi	r2,r2,11156
    101c:	10800017 	ldw	r2,0(r2)
    1020:	103ee83a 	callr	r2
    1024:	e0bfff15 	stw	r2,-4(fp)
    1028:	00000306 	br	1038 <alt_get_errno+0x48>
    102c:	00800034 	movhi	r2,0
    1030:	108bc204 	addi	r2,r2,12040
    1034:	e0bfff15 	stw	r2,-4(fp)
    1038:	e0bfff17 	ldw	r2,-4(fp)
}
    103c:	e037883a 	mov	sp,fp
    1040:	dfc00117 	ldw	ra,4(sp)
    1044:	df000017 	ldw	fp,0(sp)
    1048:	dec00204 	addi	sp,sp,8
    104c:	f800283a 	ret

00001050 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1050:	defffd04 	addi	sp,sp,-12
    1054:	dfc00215 	stw	ra,8(sp)
    1058:	df000115 	stw	fp,4(sp)
    105c:	df000104 	addi	fp,sp,4
    1060:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
    1064:	00022040 	call	2204 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1068:	00800044 	movi	r2,1
    106c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1070:	e037883a 	mov	sp,fp
    1074:	dfc00117 	ldw	ra,4(sp)
    1078:	df000017 	ldw	fp,0(sp)
    107c:	dec00204 	addi	sp,sp,8
    1080:	f800283a 	ret

00001084 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1084:	defffd04 	addi	sp,sp,-12
    1088:	dfc00215 	stw	ra,8(sp)
    108c:	df000115 	stw	fp,4(sp)
    1090:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
    1094:	01000034 	movhi	r4,0
    1098:	210a4204 	addi	r4,r4,10504
    109c:	00013680 	call	1368 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
    10a0:	00800034 	movhi	r2,0
    10a4:	108a4d04 	addi	r2,r2,10548
    10a8:	10800a17 	ldw	r2,40(r2)
    10ac:	10800104 	addi	r2,r2,4
    10b0:	10800017 	ldw	r2,0(r2)
    10b4:	10ffffcc 	andi	r3,r2,65535
    10b8:	00800034 	movhi	r2,0
    10bc:	108a4d04 	addi	r2,r2,10548
    10c0:	10c00c15 	stw	r3,48(r2)
    10c4:	00800034 	movhi	r2,0
    10c8:	108a4d04 	addi	r2,r2,10548
    10cc:	10800a17 	ldw	r2,40(r2)
    10d0:	10800104 	addi	r2,r2,4
    10d4:	10800017 	ldw	r2,0(r2)
    10d8:	1005d43a 	srai	r2,r2,16
    10dc:	10ffffcc 	andi	r3,r2,65535
    10e0:	00800034 	movhi	r2,0
    10e4:	108a4d04 	addi	r2,r2,10548
    10e8:	10c00d15 	stw	r3,52(r2)
    10ec:	00800034 	movhi	r2,0
    10f0:	108a4d04 	addi	r2,r2,10548
    10f4:	10800c17 	ldw	r2,48(r2)
    10f8:	10801068 	cmpgeui	r2,r2,65
    10fc:	1000081e 	bne	r2,zero,1120 <alt_sys_init+0x9c>
    1100:	00c00034 	movhi	r3,0
    1104:	18ca4d04 	addi	r3,r3,10548
    1108:	00800fc4 	movi	r2,63
    110c:	18800f15 	stw	r2,60(r3)
    1110:	00c00034 	movhi	r3,0
    1114:	18ca4d04 	addi	r3,r3,10548
    1118:	00800184 	movi	r2,6
    111c:	18801015 	stw	r2,64(r3)
    1120:	00800034 	movhi	r2,0
    1124:	108a4d04 	addi	r2,r2,10548
    1128:	10800d17 	ldw	r2,52(r2)
    112c:	10800868 	cmpgeui	r2,r2,33
    1130:	1000041e 	bne	r2,zero,1144 <alt_sys_init+0xc0>
    1134:	00c00034 	movhi	r3,0
    1138:	18ca4d04 	addi	r3,r3,10548
    113c:	008007c4 	movi	r2,31
    1140:	18801115 	stw	r2,68(r3)
    1144:	01000034 	movhi	r4,0
    1148:	210a4d04 	addi	r4,r4,10548
    114c:	00015f80 	call	15f8 <alt_up_char_buffer_init>
    1150:	01000034 	movhi	r4,0
    1154:	210a4d04 	addi	r4,r4,10548
    1158:	00013680 	call	1368 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
    115c:	00800034 	movhi	r2,0
    1160:	108a5f04 	addi	r2,r2,10620
    1164:	10800a17 	ldw	r2,40(r2)
    1168:	10800017 	ldw	r2,0(r2)
    116c:	1007883a 	mov	r3,r2
    1170:	00800034 	movhi	r2,0
    1174:	108a5f04 	addi	r2,r2,10620
    1178:	10c00b15 	stw	r3,44(r2)
    117c:	00800034 	movhi	r2,0
    1180:	108a5f04 	addi	r2,r2,10620
    1184:	10800a17 	ldw	r2,40(r2)
    1188:	10800104 	addi	r2,r2,4
    118c:	10800017 	ldw	r2,0(r2)
    1190:	1007883a 	mov	r3,r2
    1194:	00800034 	movhi	r2,0
    1198:	108a5f04 	addi	r2,r2,10620
    119c:	10c00c15 	stw	r3,48(r2)
    11a0:	00800034 	movhi	r2,0
    11a4:	108a5f04 	addi	r2,r2,10620
    11a8:	10800a17 	ldw	r2,40(r2)
    11ac:	10800204 	addi	r2,r2,8
    11b0:	10800017 	ldw	r2,0(r2)
    11b4:	10ffffcc 	andi	r3,r2,65535
    11b8:	00800034 	movhi	r2,0
    11bc:	108a5f04 	addi	r2,r2,10620
    11c0:	10c00f15 	stw	r3,60(r2)
    11c4:	00800034 	movhi	r2,0
    11c8:	108a5f04 	addi	r2,r2,10620
    11cc:	10800a17 	ldw	r2,40(r2)
    11d0:	10800204 	addi	r2,r2,8
    11d4:	10800017 	ldw	r2,0(r2)
    11d8:	1005d43a 	srai	r2,r2,16
    11dc:	10ffffcc 	andi	r3,r2,65535
    11e0:	00800034 	movhi	r2,0
    11e4:	108a5f04 	addi	r2,r2,10620
    11e8:	10c01015 	stw	r3,64(r2)
    11ec:	00800034 	movhi	r2,0
    11f0:	108a5f04 	addi	r2,r2,10620
    11f4:	10800a17 	ldw	r2,40(r2)
    11f8:	10800304 	addi	r2,r2,12
    11fc:	10800017 	ldw	r2,0(r2)
    1200:	1005d07a 	srai	r2,r2,1
    1204:	10c0004c 	andi	r3,r2,1
    1208:	00800034 	movhi	r2,0
    120c:	108a5f04 	addi	r2,r2,10620
    1210:	10c00d15 	stw	r3,52(r2)
    1214:	00800034 	movhi	r2,0
    1218:	108a5f04 	addi	r2,r2,10620
    121c:	10800a17 	ldw	r2,40(r2)
    1220:	10800304 	addi	r2,r2,12
    1224:	10800017 	ldw	r2,0(r2)
    1228:	1005d13a 	srai	r2,r2,4
    122c:	10c003cc 	andi	r3,r2,15
    1230:	00800034 	movhi	r2,0
    1234:	108a5f04 	addi	r2,r2,10620
    1238:	10c00e15 	stw	r3,56(r2)
    123c:	00800034 	movhi	r2,0
    1240:	108a5f04 	addi	r2,r2,10620
    1244:	10800a17 	ldw	r2,40(r2)
    1248:	10800304 	addi	r2,r2,12
    124c:	10800017 	ldw	r2,0(r2)
    1250:	1005d43a 	srai	r2,r2,16
    1254:	1007883a 	mov	r3,r2
    1258:	00bfffc4 	movi	r2,-1
    125c:	1884703a 	and	r2,r3,r2
    1260:	e0bfff45 	stb	r2,-3(fp)
    1264:	00800034 	movhi	r2,0
    1268:	108a5f04 	addi	r2,r2,10620
    126c:	10800a17 	ldw	r2,40(r2)
    1270:	10800304 	addi	r2,r2,12
    1274:	10800017 	ldw	r2,0(r2)
    1278:	1005d63a 	srai	r2,r2,24
    127c:	1007883a 	mov	r3,r2
    1280:	00bfffc4 	movi	r2,-1
    1284:	1884703a 	and	r2,r3,r2
    1288:	e0bfff05 	stb	r2,-4(fp)
    128c:	00800034 	movhi	r2,0
    1290:	108a5f04 	addi	r2,r2,10620
    1294:	10800e17 	ldw	r2,56(r2)
    1298:	10800058 	cmpnei	r2,r2,1
    129c:	1000041e 	bne	r2,zero,12b0 <alt_sys_init+0x22c>
    12a0:	00800034 	movhi	r2,0
    12a4:	108a5f04 	addi	r2,r2,10620
    12a8:	10001115 	stw	zero,68(r2)
    12ac:	00000e06 	br	12e8 <alt_sys_init+0x264>
    12b0:	00800034 	movhi	r2,0
    12b4:	108a5f04 	addi	r2,r2,10620
    12b8:	10800e17 	ldw	r2,56(r2)
    12bc:	10800098 	cmpnei	r2,r2,2
    12c0:	1000051e 	bne	r2,zero,12d8 <alt_sys_init+0x254>
    12c4:	00c00034 	movhi	r3,0
    12c8:	18ca5f04 	addi	r3,r3,10620
    12cc:	00800044 	movi	r2,1
    12d0:	18801115 	stw	r2,68(r3)
    12d4:	00000406 	br	12e8 <alt_sys_init+0x264>
    12d8:	00c00034 	movhi	r3,0
    12dc:	18ca5f04 	addi	r3,r3,10620
    12e0:	00800084 	movi	r2,2
    12e4:	18801115 	stw	r2,68(r3)
    12e8:	e0ffff43 	ldbu	r3,-3(fp)
    12ec:	00800804 	movi	r2,32
    12f0:	10c7c83a 	sub	r3,r2,r3
    12f4:	00bfffc4 	movi	r2,-1
    12f8:	10c6d83a 	srl	r3,r2,r3
    12fc:	00800034 	movhi	r2,0
    1300:	108a5f04 	addi	r2,r2,10620
    1304:	10c01215 	stw	r3,72(r2)
    1308:	e0ffff43 	ldbu	r3,-3(fp)
    130c:	00800034 	movhi	r2,0
    1310:	108a5f04 	addi	r2,r2,10620
    1314:	10801117 	ldw	r2,68(r2)
    1318:	1887883a 	add	r3,r3,r2
    131c:	00800034 	movhi	r2,0
    1320:	108a5f04 	addi	r2,r2,10620
    1324:	10c01315 	stw	r3,76(r2)
    1328:	e0ffff03 	ldbu	r3,-4(fp)
    132c:	00800804 	movi	r2,32
    1330:	10c7c83a 	sub	r3,r2,r3
    1334:	00bfffc4 	movi	r2,-1
    1338:	10c6d83a 	srl	r3,r2,r3
    133c:	00800034 	movhi	r2,0
    1340:	108a5f04 	addi	r2,r2,10620
    1344:	10c01415 	stw	r3,80(r2)
    1348:	01000034 	movhi	r4,0
    134c:	210a5f04 	addi	r4,r4,10620
    1350:	00013680 	call	1368 <alt_dev_reg>
}
    1354:	e037883a 	mov	sp,fp
    1358:	dfc00117 	ldw	ra,4(sp)
    135c:	df000017 	ldw	fp,0(sp)
    1360:	dec00204 	addi	sp,sp,8
    1364:	f800283a 	ret

00001368 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1368:	defffd04 	addi	sp,sp,-12
    136c:	dfc00215 	stw	ra,8(sp)
    1370:	df000115 	stw	fp,4(sp)
    1374:	df000104 	addi	fp,sp,4
    1378:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    137c:	e13fff17 	ldw	r4,-4(fp)
    1380:	01400034 	movhi	r5,0
    1384:	294ae204 	addi	r5,r5,11144
    1388:	0001bcc0 	call	1bcc <alt_dev_llist_insert>
}
    138c:	e037883a 	mov	sp,fp
    1390:	dfc00117 	ldw	ra,4(sp)
    1394:	df000017 	ldw	fp,0(sp)
    1398:	dec00204 	addi	sp,sp,8
    139c:	f800283a 	ret

000013a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    13a0:	defffa04 	addi	sp,sp,-24
    13a4:	dfc00515 	stw	ra,20(sp)
    13a8:	df000415 	stw	fp,16(sp)
    13ac:	df000404 	addi	fp,sp,16
    13b0:	e13ffd15 	stw	r4,-12(fp)
    13b4:	e17ffe15 	stw	r5,-8(fp)
    13b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    13bc:	e0bffd17 	ldw	r2,-12(fp)
    13c0:	10800017 	ldw	r2,0(r2)
    13c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    13c8:	e0bffc17 	ldw	r2,-16(fp)
    13cc:	11000a04 	addi	r4,r2,40
    13d0:	e0bffd17 	ldw	r2,-12(fp)
    13d4:	11c00217 	ldw	r7,8(r2)
    13d8:	e17ffe17 	ldw	r5,-8(fp)
    13dc:	e1bfff17 	ldw	r6,-4(fp)
    13e0:	00014500 	call	1450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    13e4:	e037883a 	mov	sp,fp
    13e8:	dfc00117 	ldw	ra,4(sp)
    13ec:	df000017 	ldw	fp,0(sp)
    13f0:	dec00204 	addi	sp,sp,8
    13f4:	f800283a 	ret

000013f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    13f8:	defffa04 	addi	sp,sp,-24
    13fc:	dfc00515 	stw	ra,20(sp)
    1400:	df000415 	stw	fp,16(sp)
    1404:	df000404 	addi	fp,sp,16
    1408:	e13ffd15 	stw	r4,-12(fp)
    140c:	e17ffe15 	stw	r5,-8(fp)
    1410:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1414:	e0bffd17 	ldw	r2,-12(fp)
    1418:	10800017 	ldw	r2,0(r2)
    141c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    1420:	e0bffc17 	ldw	r2,-16(fp)
    1424:	11000a04 	addi	r4,r2,40
    1428:	e0bffd17 	ldw	r2,-12(fp)
    142c:	11c00217 	ldw	r7,8(r2)
    1430:	e17ffe17 	ldw	r5,-8(fp)
    1434:	e1bfff17 	ldw	r6,-4(fp)
    1438:	00015540 	call	1554 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    143c:	e037883a 	mov	sp,fp
    1440:	dfc00117 	ldw	ra,4(sp)
    1444:	df000017 	ldw	fp,0(sp)
    1448:	dec00204 	addi	sp,sp,8
    144c:	f800283a 	ret

00001450 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    1450:	defff604 	addi	sp,sp,-40
    1454:	df000915 	stw	fp,36(sp)
    1458:	df000904 	addi	fp,sp,36
    145c:	e13ffb15 	stw	r4,-20(fp)
    1460:	e17ffc15 	stw	r5,-16(fp)
    1464:	e1bffd15 	stw	r6,-12(fp)
    1468:	e1fffe15 	stw	r7,-8(fp)
  unsigned int base = sp->base;
    146c:	e0bffb17 	ldw	r2,-20(fp)
    1470:	10800017 	ldw	r2,0(r2)
    1474:	e0bffa15 	stw	r2,-24(fp)

  char * ptr = buffer;
    1478:	e0bffc17 	ldw	r2,-16(fp)
    147c:	e0bff915 	stw	r2,-28(fp)
  char * end = buffer + space;
    1480:	e0bffd17 	ldw	r2,-12(fp)
    1484:	1007883a 	mov	r3,r2
    1488:	e0bffc17 	ldw	r2,-16(fp)
    148c:	10c5883a 	add	r2,r2,r3
    1490:	e0bff815 	stw	r2,-32(fp)

  while (ptr < end)
    1494:	00001606 	br	14f0 <altera_avalon_jtag_uart_read+0xa0>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1498:	e0bffa17 	ldw	r2,-24(fp)
    149c:	10800037 	ldwio	r2,0(r2)
    14a0:	e0bff715 	stw	r2,-36(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    14a4:	e0bff717 	ldw	r2,-36(fp)
    14a8:	10a0000c 	andi	r2,r2,32768
    14ac:	1005003a 	cmpeq	r2,r2,zero
    14b0:	1000081e 	bne	r2,zero,14d4 <altera_avalon_jtag_uart_read+0x84>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    14b4:	e0bff717 	ldw	r2,-36(fp)
    14b8:	1007883a 	mov	r3,r2
    14bc:	e0bff917 	ldw	r2,-28(fp)
    14c0:	10c00005 	stb	r3,0(r2)
    14c4:	e0bff917 	ldw	r2,-28(fp)
    14c8:	10800044 	addi	r2,r2,1
    14cc:	e0bff915 	stw	r2,-28(fp)
    14d0:	00000706 	br	14f0 <altera_avalon_jtag_uart_read+0xa0>
    else if (ptr != buffer)
    14d4:	e0fff917 	ldw	r3,-28(fp)
    14d8:	e0bffc17 	ldw	r2,-16(fp)
    14dc:	1880071e 	bne	r3,r2,14fc <altera_avalon_jtag_uart_read+0xac>
      break;
    else if(flags & O_NONBLOCK)
    14e0:	e0bffe17 	ldw	r2,-8(fp)
    14e4:	1090000c 	andi	r2,r2,16384
    14e8:	1004c03a 	cmpne	r2,r2,zero
    14ec:	1000031e 	bne	r2,zero,14fc <altera_avalon_jtag_uart_read+0xac>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    14f0:	e0fff917 	ldw	r3,-28(fp)
    14f4:	e0bff817 	ldw	r2,-32(fp)
    14f8:	18bfe736 	bltu	r3,r2,1498 <altera_avalon_jtag_uart_read+0x48>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
    14fc:	e0fff917 	ldw	r3,-28(fp)
    1500:	e0bffc17 	ldw	r2,-16(fp)
    1504:	18800526 	beq	r3,r2,151c <altera_avalon_jtag_uart_read+0xcc>
    return ptr - buffer;
    1508:	e0fff917 	ldw	r3,-28(fp)
    150c:	e0bffc17 	ldw	r2,-16(fp)
    1510:	1887c83a 	sub	r3,r3,r2
    1514:	e0ffff15 	stw	r3,-4(fp)
    1518:	00000906 	br	1540 <altera_avalon_jtag_uart_read+0xf0>
  else if (flags & O_NONBLOCK)
    151c:	e0bffe17 	ldw	r2,-8(fp)
    1520:	1090000c 	andi	r2,r2,16384
    1524:	1005003a 	cmpeq	r2,r2,zero
    1528:	1000031e 	bne	r2,zero,1538 <altera_avalon_jtag_uart_read+0xe8>
    return -EWOULDBLOCK;
    152c:	00bffd44 	movi	r2,-11
    1530:	e0bfff15 	stw	r2,-4(fp)
    1534:	00000206 	br	1540 <altera_avalon_jtag_uart_read+0xf0>
  else
    return -EIO;
    1538:	00bffec4 	movi	r2,-5
    153c:	e0bfff15 	stw	r2,-4(fp)
    1540:	e0bfff17 	ldw	r2,-4(fp)
}
    1544:	e037883a 	mov	sp,fp
    1548:	df000017 	ldw	fp,0(sp)
    154c:	dec00104 	addi	sp,sp,4
    1550:	f800283a 	ret

00001554 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1554:	defff904 	addi	sp,sp,-28
    1558:	df000615 	stw	fp,24(sp)
    155c:	df000604 	addi	fp,sp,24
    1560:	e13ffc15 	stw	r4,-16(fp)
    1564:	e17ffd15 	stw	r5,-12(fp)
    1568:	e1bffe15 	stw	r6,-8(fp)
    156c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1570:	e0bffc17 	ldw	r2,-16(fp)
    1574:	10800017 	ldw	r2,0(r2)
    1578:	e0bffb15 	stw	r2,-20(fp)

  const char * end = ptr + count;
    157c:	e0bffe17 	ldw	r2,-8(fp)
    1580:	1007883a 	mov	r3,r2
    1584:	e0bffd17 	ldw	r2,-12(fp)
    1588:	10c5883a 	add	r2,r2,r3
    158c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1590:	00001106 	br	15d8 <altera_avalon_jtag_uart_write+0x84>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1594:	e0bffb17 	ldw	r2,-20(fp)
    1598:	10800104 	addi	r2,r2,4
    159c:	10800037 	ldwio	r2,0(r2)
    15a0:	10bfffec 	andhi	r2,r2,65535
    15a4:	1005003a 	cmpeq	r2,r2,zero
    15a8:	10000b1e 	bne	r2,zero,15d8 <altera_avalon_jtag_uart_write+0x84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    15ac:	e13ffb17 	ldw	r4,-20(fp)
    15b0:	e0bffd17 	ldw	r2,-12(fp)
    15b4:	10800003 	ldbu	r2,0(r2)
    15b8:	10c03fcc 	andi	r3,r2,255
    15bc:	18c0201c 	xori	r3,r3,128
    15c0:	18ffe004 	addi	r3,r3,-128
    15c4:	e0bffd17 	ldw	r2,-12(fp)
    15c8:	10800044 	addi	r2,r2,1
    15cc:	e0bffd15 	stw	r2,-12(fp)
    15d0:	2005883a 	mov	r2,r4
    15d4:	10c00035 	stwio	r3,0(r2)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    15d8:	e0fffd17 	ldw	r3,-12(fp)
    15dc:	e0bffa17 	ldw	r2,-24(fp)
    15e0:	18bfec36 	bltu	r3,r2,1594 <altera_avalon_jtag_uart_write+0x40>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    15e4:	e0bffe17 	ldw	r2,-8(fp)
}
    15e8:	e037883a 	mov	sp,fp
    15ec:	df000017 	ldw	fp,0(sp)
    15f0:	dec00104 	addi	sp,sp,4
    15f4:	f800283a 	ret

000015f8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    15f8:	defffc04 	addi	sp,sp,-16
    15fc:	dfc00315 	stw	ra,12(sp)
    1600:	df000215 	stw	fp,8(sp)
    1604:	df000204 	addi	fp,sp,8
    1608:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
    160c:	e0bfff17 	ldw	r2,-4(fp)
    1610:	10800217 	ldw	r2,8(r2)
    1614:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
    1618:	00000c06 	br	164c <alt_up_char_buffer_init+0x54>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    161c:	e13ffe17 	ldw	r4,-8(fp)
    1620:	01400034 	movhi	r5,0
    1624:	294a0004 	addi	r5,r5,10240
    1628:	00024e80 	call	24e8 <strcmp>
    162c:	1004c03a 	cmpne	r2,r2,zero
    1630:	1000031e 	bne	r2,zero,1640 <alt_up_char_buffer_init+0x48>
			(*name) = '\0';
    1634:	e0bffe17 	ldw	r2,-8(fp)
    1638:	10000005 	stb	zero,0(r2)
			break;
    163c:	00000a06 	br	1668 <alt_up_char_buffer_init+0x70>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1640:	e0bffe17 	ldw	r2,-8(fp)
    1644:	10800044 	addi	r2,r2,1
    1648:	e0bffe15 	stw	r2,-8(fp)
    164c:	e0bffe17 	ldw	r2,-8(fp)
    1650:	10800003 	ldbu	r2,0(r2)
    1654:	10803fcc 	andi	r2,r2,255
    1658:	1080201c 	xori	r2,r2,128
    165c:	10bfe004 	addi	r2,r2,-128
    1660:	1004c03a 	cmpne	r2,r2,zero
    1664:	103fed1e 	bne	r2,zero,161c <alt_up_char_buffer_init+0x24>
			break;
		}
	}
	
	return;
}
    1668:	e037883a 	mov	sp,fp
    166c:	dfc00117 	ldw	ra,4(sp)
    1670:	df000017 	ldw	fp,0(sp)
    1674:	dec00204 	addi	sp,sp,8
    1678:	f800283a 	ret

0000167c <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    167c:	defffc04 	addi	sp,sp,-16
    1680:	dfc00315 	stw	ra,12(sp)
    1684:	df000215 	stw	fp,8(sp)
    1688:	df000204 	addi	fp,sp,8
    168c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1690:	e13fff17 	ldw	r4,-4(fp)
    1694:	01400034 	movhi	r5,0
    1698:	294ae204 	addi	r5,r5,11144
    169c:	0001ce00 	call	1ce0 <alt_find_dev>
    16a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    16a4:	e0bffe17 	ldw	r2,-8(fp)
}
    16a8:	e037883a 	mov	sp,fp
    16ac:	dfc00117 	ldw	ra,4(sp)
    16b0:	df000017 	ldw	fp,0(sp)
    16b4:	dec00204 	addi	sp,sp,8
    16b8:	f800283a 	ret

000016bc <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
    16bc:	defff904 	addi	sp,sp,-28
    16c0:	df000615 	stw	fp,24(sp)
    16c4:	df000604 	addi	fp,sp,24
    16c8:	e13ffb15 	stw	r4,-20(fp)
    16cc:	e1bffd15 	stw	r6,-12(fp)
    16d0:	e1fffe15 	stw	r7,-8(fp)
    16d4:	e17ffc05 	stb	r5,-16(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    16d8:	e0bffb17 	ldw	r2,-20(fp)
    16dc:	10c00c17 	ldw	r3,48(r2)
    16e0:	e0bffd17 	ldw	r2,-12(fp)
    16e4:	10c0042e 	bgeu	r2,r3,16f8 <alt_up_char_buffer_draw+0x3c>
    16e8:	e0bffb17 	ldw	r2,-20(fp)
    16ec:	10c00d17 	ldw	r3,52(r2)
    16f0:	e0bffe17 	ldw	r2,-8(fp)
    16f4:	10c00336 	bltu	r2,r3,1704 <alt_up_char_buffer_draw+0x48>
		return -1;
    16f8:	00bfffc4 	movi	r2,-1
    16fc:	e0bfff15 	stw	r2,-4(fp)
    1700:	00001d06 	br	1778 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
    1704:	e03ffa15 	stw	zero,-24(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    1708:	e0bffb17 	ldw	r2,-20(fp)
    170c:	10c00f17 	ldw	r3,60(r2)
    1710:	e0bffd17 	ldw	r2,-12(fp)
    1714:	1886703a 	and	r3,r3,r2
    1718:	e0bffb17 	ldw	r2,-20(fp)
    171c:	10800e17 	ldw	r2,56(r2)
    1720:	1886983a 	sll	r3,r3,r2
    1724:	e0bffa17 	ldw	r2,-24(fp)
    1728:	10c4b03a 	or	r2,r2,r3
    172c:	e0bffa15 	stw	r2,-24(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    1730:	e0bffb17 	ldw	r2,-20(fp)
    1734:	10c01117 	ldw	r3,68(r2)
    1738:	e0bffe17 	ldw	r2,-8(fp)
    173c:	1886703a 	and	r3,r3,r2
    1740:	e0bffb17 	ldw	r2,-20(fp)
    1744:	10801017 	ldw	r2,64(r2)
    1748:	1886983a 	sll	r3,r3,r2
    174c:	e0bffa17 	ldw	r2,-24(fp)
    1750:	10c4b03a 	or	r2,r2,r3
    1754:	e0bffa15 	stw	r2,-24(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1758:	e0bffb17 	ldw	r2,-20(fp)
    175c:	10800b17 	ldw	r2,44(r2)
    1760:	1007883a 	mov	r3,r2
    1764:	e0bffa17 	ldw	r2,-24(fp)
    1768:	1885883a 	add	r2,r3,r2
    176c:	e0fffc03 	ldbu	r3,-16(fp)
    1770:	10c00025 	stbio	r3,0(r2)

	return 0;
    1774:	e03fff15 	stw	zero,-4(fp)
    1778:	e0bfff17 	ldw	r2,-4(fp)
}
    177c:	e037883a 	mov	sp,fp
    1780:	df000017 	ldw	fp,0(sp)
    1784:	dec00104 	addi	sp,sp,4
    1788:	f800283a 	ret

0000178c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
    178c:	defff904 	addi	sp,sp,-28
    1790:	df000615 	stw	fp,24(sp)
    1794:	df000604 	addi	fp,sp,24
    1798:	e13ffb15 	stw	r4,-20(fp)
    179c:	e17ffc15 	stw	r5,-16(fp)
    17a0:	e1bffd15 	stw	r6,-12(fp)
    17a4:	e1fffe15 	stw	r7,-8(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    17a8:	e0bffb17 	ldw	r2,-20(fp)
    17ac:	10c00c17 	ldw	r3,48(r2)
    17b0:	e0bffd17 	ldw	r2,-12(fp)
    17b4:	10c0042e 	bgeu	r2,r3,17c8 <alt_up_char_buffer_string+0x3c>
    17b8:	e0bffb17 	ldw	r2,-20(fp)
    17bc:	10c00d17 	ldw	r3,52(r2)
    17c0:	e0bffe17 	ldw	r2,-8(fp)
    17c4:	10c00336 	bltu	r2,r3,17d4 <alt_up_char_buffer_string+0x48>
		return -1;
    17c8:	00bfffc4 	movi	r2,-1
    17cc:	e0bfff15 	stw	r2,-4(fp)
    17d0:	00002e06 	br	188c <alt_up_char_buffer_string+0x100>
	
	unsigned int offset = 0;
    17d4:	e03ffa15 	stw	zero,-24(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
    17d8:	e0bffb17 	ldw	r2,-20(fp)
    17dc:	10801017 	ldw	r2,64(r2)
    17e0:	1007883a 	mov	r3,r2
    17e4:	e0bffe17 	ldw	r2,-8(fp)
    17e8:	10c6983a 	sll	r3,r2,r3
    17ec:	e0bffd17 	ldw	r2,-12(fp)
    17f0:	1885883a 	add	r2,r3,r2
    17f4:	e0bffa15 	stw	r2,-24(fp)

	while ( *ptr )
    17f8:	00001c06 	br	186c <alt_up_char_buffer_string+0xe0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    17fc:	e0bffb17 	ldw	r2,-20(fp)
    1800:	10800b17 	ldw	r2,44(r2)
    1804:	1007883a 	mov	r3,r2
    1808:	e0bffa17 	ldw	r2,-24(fp)
    180c:	1889883a 	add	r4,r3,r2
    1810:	e0bffc17 	ldw	r2,-16(fp)
    1814:	10800003 	ldbu	r2,0(r2)
    1818:	10c03fcc 	andi	r3,r2,255
    181c:	18c0201c 	xori	r3,r3,128
    1820:	18ffe004 	addi	r3,r3,-128
    1824:	2005883a 	mov	r2,r4
    1828:	10c00025 	stbio	r3,0(r2)
		++ptr;
    182c:	e0bffc17 	ldw	r2,-16(fp)
    1830:	10800044 	addi	r2,r2,1
    1834:	e0bffc15 	stw	r2,-16(fp)
		if (++x >= char_buffer->x_resolution)
    1838:	e0bffd17 	ldw	r2,-12(fp)
    183c:	10800044 	addi	r2,r2,1
    1840:	e0bffd15 	stw	r2,-12(fp)
    1844:	e0bffb17 	ldw	r2,-20(fp)
    1848:	10c00c17 	ldw	r3,48(r2)
    184c:	e0bffd17 	ldw	r2,-12(fp)
    1850:	10c00336 	bltu	r2,r3,1860 <alt_up_char_buffer_string+0xd4>
			return -1;
    1854:	00bfffc4 	movi	r2,-1
    1858:	e0bfff15 	stw	r2,-4(fp)
    185c:	00000b06 	br	188c <alt_up_char_buffer_string+0x100>
		++offset;
    1860:	e0bffa17 	ldw	r2,-24(fp)
    1864:	10800044 	addi	r2,r2,1
    1868:	e0bffa15 	stw	r2,-24(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    186c:	e0bffc17 	ldw	r2,-16(fp)
    1870:	10800003 	ldbu	r2,0(r2)
    1874:	10803fcc 	andi	r2,r2,255
    1878:	1080201c 	xori	r2,r2,128
    187c:	10bfe004 	addi	r2,r2,-128
    1880:	1004c03a 	cmpne	r2,r2,zero
    1884:	103fdd1e 	bne	r2,zero,17fc <alt_up_char_buffer_string+0x70>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    1888:	e03fff15 	stw	zero,-4(fp)
    188c:	e0bfff17 	ldw	r2,-4(fp)
}
    1890:	e037883a 	mov	sp,fp
    1894:	df000017 	ldw	fp,0(sp)
    1898:	dec00104 	addi	sp,sp,4
    189c:	f800283a 	ret

000018a0 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
    18a0:	defffe04 	addi	sp,sp,-8
    18a4:	df000115 	stw	fp,4(sp)
    18a8:	df000104 	addi	fp,sp,4
    18ac:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    18b0:	e0bfff17 	ldw	r2,-4(fp)
    18b4:	10800a17 	ldw	r2,40(r2)
    18b8:	10800084 	addi	r2,r2,2
    18bc:	1007883a 	mov	r3,r2
    18c0:	00800044 	movi	r2,1
    18c4:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10800a17 	ldw	r2,40(r2)
    18d0:	10800084 	addi	r2,r2,2
    18d4:	10800023 	ldbuio	r2,0(r2)
    18d8:	1080004c 	andi	r2,r2,1
    18dc:	10803fcc 	andi	r2,r2,255
    18e0:	1004c03a 	cmpne	r2,r2,zero
    18e4:	103ff81e 	bne	r2,zero,18c8 <alt_up_char_buffer_clear+0x28>
	return 0;
    18e8:	0005883a 	mov	r2,zero
}
    18ec:	e037883a 	mov	sp,fp
    18f0:	df000017 	ldw	fp,0(sp)
    18f4:	dec00104 	addi	sp,sp,4
    18f8:	f800283a 	ret

000018fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    18fc:	defffb04 	addi	sp,sp,-20
    1900:	df000415 	stw	fp,16(sp)
    1904:	df000404 	addi	fp,sp,16
    1908:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    190c:	008000c4 	movi	r2,3
    1910:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    1914:	e0fffc17 	ldw	r3,-16(fp)
    1918:	008003f4 	movhi	r2,15
    191c:	10909004 	addi	r2,r2,16960
    1920:	1887383a 	mul	r3,r3,r2
    1924:	0080bef4 	movhi	r2,763
    1928:	10bc2004 	addi	r2,r2,-3968
    192c:	10c7203a 	divu	r3,r2,r3
    1930:	00a00034 	movhi	r2,32768
    1934:	10bfffc4 	addi	r2,r2,-1
    1938:	10c7203a 	divu	r3,r2,r3
    193c:	e0bfff17 	ldw	r2,-4(fp)
    1940:	10c5203a 	divu	r2,r2,r3
    1944:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    1948:	e0bffd17 	ldw	r2,-12(fp)
    194c:	1005003a 	cmpeq	r2,r2,zero
    1950:	1000251e 	bne	r2,zero,19e8 <alt_busy_sleep+0xec>
  {
    for(i=0;i<big_loops;i++)
    1954:	e03ffe15 	stw	zero,-8(fp)
    1958:	00001406 	br	19ac <alt_busy_sleep+0xb0>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    195c:	00a00034 	movhi	r2,32768
    1960:	10bfffc4 	addi	r2,r2,-1
    1964:	10bfffc4 	addi	r2,r2,-1
    1968:	103ffe1e 	bne	r2,zero,1964 <alt_busy_sleep+0x68>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    196c:	e0fffc17 	ldw	r3,-16(fp)
    1970:	008003f4 	movhi	r2,15
    1974:	10909004 	addi	r2,r2,16960
    1978:	1887383a 	mul	r3,r3,r2
    197c:	0080bef4 	movhi	r2,763
    1980:	10bc2004 	addi	r2,r2,-3968
    1984:	10c7203a 	divu	r3,r2,r3
    1988:	00a00034 	movhi	r2,32768
    198c:	10bfffc4 	addi	r2,r2,-1
    1990:	10c7203a 	divu	r3,r2,r3
    1994:	e0bfff17 	ldw	r2,-4(fp)
    1998:	10c5c83a 	sub	r2,r2,r3
    199c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    19a0:	e0bffe17 	ldw	r2,-8(fp)
    19a4:	10800044 	addi	r2,r2,1
    19a8:	e0bffe15 	stw	r2,-8(fp)
    19ac:	e0fffe17 	ldw	r3,-8(fp)
    19b0:	e0bffd17 	ldw	r2,-12(fp)
    19b4:	18bfe916 	blt	r3,r2,195c <alt_busy_sleep+0x60>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    19b8:	e0fffc17 	ldw	r3,-16(fp)
    19bc:	008003f4 	movhi	r2,15
    19c0:	10909004 	addi	r2,r2,16960
    19c4:	1887383a 	mul	r3,r3,r2
    19c8:	0080bef4 	movhi	r2,763
    19cc:	10bc2004 	addi	r2,r2,-3968
    19d0:	10c7203a 	divu	r3,r2,r3
    19d4:	e0bfff17 	ldw	r2,-4(fp)
    19d8:	1885383a 	mul	r2,r3,r2
    19dc:	10bfffc4 	addi	r2,r2,-1
    19e0:	103ffe1e 	bne	r2,zero,19dc <alt_busy_sleep+0xe0>
    19e4:	00000b06 	br	1a14 <alt_busy_sleep+0x118>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    19e8:	e0fffc17 	ldw	r3,-16(fp)
    19ec:	008003f4 	movhi	r2,15
    19f0:	10909004 	addi	r2,r2,16960
    19f4:	1887383a 	mul	r3,r3,r2
    19f8:	0080bef4 	movhi	r2,763
    19fc:	10bc2004 	addi	r2,r2,-3968
    1a00:	10c7203a 	divu	r3,r2,r3
    1a04:	e0bfff17 	ldw	r2,-4(fp)
    1a08:	1885383a 	mul	r2,r3,r2
    1a0c:	10bfffc4 	addi	r2,r2,-1
    1a10:	00bffe16 	blt	zero,r2,1a0c <alt_busy_sleep+0x110>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    1a14:	0005883a 	mov	r2,zero
}
    1a18:	e037883a 	mov	sp,fp
    1a1c:	df000017 	ldw	fp,0(sp)
    1a20:	dec00104 	addi	sp,sp,4
    1a24:	f800283a 	ret

00001a28 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1a28:	defff804 	addi	sp,sp,-32
    1a2c:	dfc00715 	stw	ra,28(sp)
    1a30:	df000615 	stw	fp,24(sp)
    1a34:	df000604 	addi	fp,sp,24
    1a38:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1a3c:	e0bffc17 	ldw	r2,-16(fp)
    1a40:	1004803a 	cmplt	r2,r2,zero
    1a44:	1000081e 	bne	r2,zero,1a68 <close+0x40>
    1a48:	e0bffc17 	ldw	r2,-16(fp)
    1a4c:	10800324 	muli	r2,r2,12
    1a50:	1007883a 	mov	r3,r2
    1a54:	00800034 	movhi	r2,0
    1a58:	108a7e04 	addi	r2,r2,10744
    1a5c:	1887883a 	add	r3,r3,r2
    1a60:	e0ffff15 	stw	r3,-4(fp)
    1a64:	00000106 	br	1a6c <close+0x44>
    1a68:	e03fff15 	stw	zero,-4(fp)
    1a6c:	e0bfff17 	ldw	r2,-4(fp)
    1a70:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1a74:	e0bffb17 	ldw	r2,-20(fp)
    1a78:	1005003a 	cmpeq	r2,r2,zero
    1a7c:	10001d1e 	bne	r2,zero,1af4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1a80:	e0bffb17 	ldw	r2,-20(fp)
    1a84:	10800017 	ldw	r2,0(r2)
    1a88:	10800417 	ldw	r2,16(r2)
    1a8c:	1005003a 	cmpeq	r2,r2,zero
    1a90:	1000071e 	bne	r2,zero,1ab0 <close+0x88>
    1a94:	e0bffb17 	ldw	r2,-20(fp)
    1a98:	10800017 	ldw	r2,0(r2)
    1a9c:	10800417 	ldw	r2,16(r2)
    1aa0:	e13ffb17 	ldw	r4,-20(fp)
    1aa4:	103ee83a 	callr	r2
    1aa8:	e0bffe15 	stw	r2,-8(fp)
    1aac:	00000106 	br	1ab4 <close+0x8c>
    1ab0:	e03ffe15 	stw	zero,-8(fp)
    1ab4:	e0bffe17 	ldw	r2,-8(fp)
    1ab8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1abc:	e13ffc17 	ldw	r4,-16(fp)
    1ac0:	00021a40 	call	21a4 <alt_release_fd>
    if (rval < 0)
    1ac4:	e0bffa17 	ldw	r2,-24(fp)
    1ac8:	1004403a 	cmpge	r2,r2,zero
    1acc:	1000071e 	bne	r2,zero,1aec <close+0xc4>
    {
      ALT_ERRNO = -rval;
    1ad0:	0001b240 	call	1b24 <alt_get_errno>
    1ad4:	e0fffa17 	ldw	r3,-24(fp)
    1ad8:	00c7c83a 	sub	r3,zero,r3
    1adc:	10c00015 	stw	r3,0(r2)
      return -1;
    1ae0:	00bfffc4 	movi	r2,-1
    1ae4:	e0bffd15 	stw	r2,-12(fp)
    1ae8:	00000806 	br	1b0c <close+0xe4>
    }
    return 0;
    1aec:	e03ffd15 	stw	zero,-12(fp)
    1af0:	00000606 	br	1b0c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1af4:	0001b240 	call	1b24 <alt_get_errno>
    1af8:	1007883a 	mov	r3,r2
    1afc:	00801444 	movi	r2,81
    1b00:	18800015 	stw	r2,0(r3)
    return -1;
    1b04:	00bfffc4 	movi	r2,-1
    1b08:	e0bffd15 	stw	r2,-12(fp)
    1b0c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1b10:	e037883a 	mov	sp,fp
    1b14:	dfc00117 	ldw	ra,4(sp)
    1b18:	df000017 	ldw	fp,0(sp)
    1b1c:	dec00204 	addi	sp,sp,8
    1b20:	f800283a 	ret

00001b24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1b24:	defffd04 	addi	sp,sp,-12
    1b28:	dfc00215 	stw	ra,8(sp)
    1b2c:	df000115 	stw	fp,4(sp)
    1b30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1b34:	00800034 	movhi	r2,0
    1b38:	108ae504 	addi	r2,r2,11156
    1b3c:	10800017 	ldw	r2,0(r2)
    1b40:	1005003a 	cmpeq	r2,r2,zero
    1b44:	1000061e 	bne	r2,zero,1b60 <alt_get_errno+0x3c>
    1b48:	00800034 	movhi	r2,0
    1b4c:	108ae504 	addi	r2,r2,11156
    1b50:	10800017 	ldw	r2,0(r2)
    1b54:	103ee83a 	callr	r2
    1b58:	e0bfff15 	stw	r2,-4(fp)
    1b5c:	00000306 	br	1b6c <alt_get_errno+0x48>
    1b60:	00800034 	movhi	r2,0
    1b64:	108bc204 	addi	r2,r2,12040
    1b68:	e0bfff15 	stw	r2,-4(fp)
    1b6c:	e0bfff17 	ldw	r2,-4(fp)
}
    1b70:	e037883a 	mov	sp,fp
    1b74:	dfc00117 	ldw	ra,4(sp)
    1b78:	df000017 	ldw	fp,0(sp)
    1b7c:	dec00204 	addi	sp,sp,8
    1b80:	f800283a 	ret

00001b84 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1b84:	deffff04 	addi	sp,sp,-4
    1b88:	df000015 	stw	fp,0(sp)
    1b8c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1b90:	e037883a 	mov	sp,fp
    1b94:	df000017 	ldw	fp,0(sp)
    1b98:	dec00104 	addi	sp,sp,4
    1b9c:	f800283a 	ret

00001ba0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1ba0:	defffc04 	addi	sp,sp,-16
    1ba4:	df000315 	stw	fp,12(sp)
    1ba8:	df000304 	addi	fp,sp,12
    1bac:	e13ffd15 	stw	r4,-12(fp)
    1bb0:	e17ffe15 	stw	r5,-8(fp)
    1bb4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1bb8:	e0bfff17 	ldw	r2,-4(fp)
}
    1bbc:	e037883a 	mov	sp,fp
    1bc0:	df000017 	ldw	fp,0(sp)
    1bc4:	dec00104 	addi	sp,sp,4
    1bc8:	f800283a 	ret

00001bcc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1bcc:	defff904 	addi	sp,sp,-28
    1bd0:	dfc00615 	stw	ra,24(sp)
    1bd4:	df000515 	stw	fp,20(sp)
    1bd8:	df000504 	addi	fp,sp,20
    1bdc:	e13ffd15 	stw	r4,-12(fp)
    1be0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1be4:	e0bffd17 	ldw	r2,-12(fp)
    1be8:	1005003a 	cmpeq	r2,r2,zero
    1bec:	1000041e 	bne	r2,zero,1c00 <alt_dev_llist_insert+0x34>
    1bf0:	e0bffd17 	ldw	r2,-12(fp)
    1bf4:	10800217 	ldw	r2,8(r2)
    1bf8:	1004c03a 	cmpne	r2,r2,zero
    1bfc:	1000071e 	bne	r2,zero,1c1c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    1c00:	0001c800 	call	1c80 <alt_get_errno>
    1c04:	1007883a 	mov	r3,r2
    1c08:	00800584 	movi	r2,22
    1c0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1c10:	00bffa84 	movi	r2,-22
    1c14:	e0bfff15 	stw	r2,-4(fp)
    1c18:	00001306 	br	1c68 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1c1c:	e0fffd17 	ldw	r3,-12(fp)
    1c20:	e0bffe17 	ldw	r2,-8(fp)
    1c24:	e0bffb15 	stw	r2,-20(fp)
    1c28:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1c2c:	e0fffc17 	ldw	r3,-16(fp)
    1c30:	e0bffb17 	ldw	r2,-20(fp)
    1c34:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1c38:	e0bffb17 	ldw	r2,-20(fp)
    1c3c:	10c00017 	ldw	r3,0(r2)
    1c40:	e0bffc17 	ldw	r2,-16(fp)
    1c44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1c48:	e0bffb17 	ldw	r2,-20(fp)
    1c4c:	10c00017 	ldw	r3,0(r2)
    1c50:	e0bffc17 	ldw	r2,-16(fp)
    1c54:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1c58:	e0fffb17 	ldw	r3,-20(fp)
    1c5c:	e0bffc17 	ldw	r2,-16(fp)
    1c60:	18800015 	stw	r2,0(r3)

  return 0;  
    1c64:	e03fff15 	stw	zero,-4(fp)
    1c68:	e0bfff17 	ldw	r2,-4(fp)
}
    1c6c:	e037883a 	mov	sp,fp
    1c70:	dfc00117 	ldw	ra,4(sp)
    1c74:	df000017 	ldw	fp,0(sp)
    1c78:	dec00204 	addi	sp,sp,8
    1c7c:	f800283a 	ret

00001c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1c80:	defffd04 	addi	sp,sp,-12
    1c84:	dfc00215 	stw	ra,8(sp)
    1c88:	df000115 	stw	fp,4(sp)
    1c8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1c90:	00800034 	movhi	r2,0
    1c94:	108ae504 	addi	r2,r2,11156
    1c98:	10800017 	ldw	r2,0(r2)
    1c9c:	1005003a 	cmpeq	r2,r2,zero
    1ca0:	1000061e 	bne	r2,zero,1cbc <alt_get_errno+0x3c>
    1ca4:	00800034 	movhi	r2,0
    1ca8:	108ae504 	addi	r2,r2,11156
    1cac:	10800017 	ldw	r2,0(r2)
    1cb0:	103ee83a 	callr	r2
    1cb4:	e0bfff15 	stw	r2,-4(fp)
    1cb8:	00000306 	br	1cc8 <alt_get_errno+0x48>
    1cbc:	00800034 	movhi	r2,0
    1cc0:	108bc204 	addi	r2,r2,12040
    1cc4:	e0bfff15 	stw	r2,-4(fp)
    1cc8:	e0bfff17 	ldw	r2,-4(fp)
}
    1ccc:	e037883a 	mov	sp,fp
    1cd0:	dfc00117 	ldw	ra,4(sp)
    1cd4:	df000017 	ldw	fp,0(sp)
    1cd8:	dec00204 	addi	sp,sp,8
    1cdc:	f800283a 	ret

00001ce0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    1ce0:	defff904 	addi	sp,sp,-28
    1ce4:	dfc00615 	stw	ra,24(sp)
    1ce8:	df000515 	stw	fp,20(sp)
    1cec:	df000504 	addi	fp,sp,20
    1cf0:	e13ffd15 	stw	r4,-12(fp)
    1cf4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    1cf8:	e0bffe17 	ldw	r2,-8(fp)
    1cfc:	10800017 	ldw	r2,0(r2)
    1d00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    1d04:	e13ffd17 	ldw	r4,-12(fp)
    1d08:	0000c040 	call	c04 <strlen>
    1d0c:	10800044 	addi	r2,r2,1
    1d10:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1d14:	00000d06 	br	1d4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    1d18:	e0bffc17 	ldw	r2,-16(fp)
    1d1c:	11000217 	ldw	r4,8(r2)
    1d20:	e1bffb17 	ldw	r6,-20(fp)
    1d24:	e17ffd17 	ldw	r5,-12(fp)
    1d28:	00024ac0 	call	24ac <memcmp>
    1d2c:	1004c03a 	cmpne	r2,r2,zero
    1d30:	1000031e 	bne	r2,zero,1d40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    1d34:	e0bffc17 	ldw	r2,-16(fp)
    1d38:	e0bfff15 	stw	r2,-4(fp)
    1d3c:	00000706 	br	1d5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    1d40:	e0bffc17 	ldw	r2,-16(fp)
    1d44:	10800017 	ldw	r2,0(r2)
    1d48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    1d4c:	e0fffe17 	ldw	r3,-8(fp)
    1d50:	e0bffc17 	ldw	r2,-16(fp)
    1d54:	10fff01e 	bne	r2,r3,1d18 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    1d58:	e03fff15 	stw	zero,-4(fp)
    1d5c:	e0bfff17 	ldw	r2,-4(fp)
}
    1d60:	e037883a 	mov	sp,fp
    1d64:	dfc00117 	ldw	ra,4(sp)
    1d68:	df000017 	ldw	fp,0(sp)
    1d6c:	dec00204 	addi	sp,sp,8
    1d70:	f800283a 	ret

00001d74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1d74:	defffe04 	addi	sp,sp,-8
    1d78:	dfc00115 	stw	ra,4(sp)
    1d7c:	df000015 	stw	fp,0(sp)
    1d80:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1d84:	0009883a 	mov	r4,zero
    1d88:	01440004 	movi	r5,4096
    1d8c:	00023fc0 	call	23fc <alt_icache_flush>
#endif
}
    1d90:	e037883a 	mov	sp,fp
    1d94:	dfc00117 	ldw	ra,4(sp)
    1d98:	df000017 	ldw	fp,0(sp)
    1d9c:	dec00204 	addi	sp,sp,8
    1da0:	f800283a 	ret

00001da4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1da4:	defff904 	addi	sp,sp,-28
    1da8:	dfc00615 	stw	ra,24(sp)
    1dac:	df000515 	stw	fp,20(sp)
    1db0:	df000504 	addi	fp,sp,20
    1db4:	e13ffc15 	stw	r4,-16(fp)
    1db8:	e17ffd15 	stw	r5,-12(fp)
    1dbc:	e1bffe15 	stw	r6,-8(fp)
    1dc0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    1dc4:	e13ffd17 	ldw	r4,-12(fp)
    1dc8:	e17ffe17 	ldw	r5,-8(fp)
    1dcc:	e1bfff17 	ldw	r6,-4(fp)
    1dd0:	0001fbc0 	call	1fbc <open>
    1dd4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    1dd8:	e0bffb17 	ldw	r2,-20(fp)
    1ddc:	1004803a 	cmplt	r2,r2,zero
    1de0:	10001c1e 	bne	r2,zero,1e54 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    1de4:	e0bffb17 	ldw	r2,-20(fp)
    1de8:	00c00034 	movhi	r3,0
    1dec:	18ca7e04 	addi	r3,r3,10744
    1df0:	10800324 	muli	r2,r2,12
    1df4:	10c5883a 	add	r2,r2,r3
    1df8:	10c00017 	ldw	r3,0(r2)
    1dfc:	e0bffc17 	ldw	r2,-16(fp)
    1e00:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1e04:	e0bffb17 	ldw	r2,-20(fp)
    1e08:	00c00034 	movhi	r3,0
    1e0c:	18ca7e04 	addi	r3,r3,10744
    1e10:	10800324 	muli	r2,r2,12
    1e14:	10c5883a 	add	r2,r2,r3
    1e18:	10800104 	addi	r2,r2,4
    1e1c:	10c00017 	ldw	r3,0(r2)
    1e20:	e0bffc17 	ldw	r2,-16(fp)
    1e24:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1e28:	e0bffb17 	ldw	r2,-20(fp)
    1e2c:	00c00034 	movhi	r3,0
    1e30:	18ca7e04 	addi	r3,r3,10744
    1e34:	10800324 	muli	r2,r2,12
    1e38:	10c5883a 	add	r2,r2,r3
    1e3c:	10800204 	addi	r2,r2,8
    1e40:	10c00017 	ldw	r3,0(r2)
    1e44:	e0bffc17 	ldw	r2,-16(fp)
    1e48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1e4c:	e13ffb17 	ldw	r4,-20(fp)
    1e50:	00021a40 	call	21a4 <alt_release_fd>
  }
} 
    1e54:	e037883a 	mov	sp,fp
    1e58:	dfc00117 	ldw	ra,4(sp)
    1e5c:	df000017 	ldw	fp,0(sp)
    1e60:	dec00204 	addi	sp,sp,8
    1e64:	f800283a 	ret

00001e68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1e68:	defffb04 	addi	sp,sp,-20
    1e6c:	dfc00415 	stw	ra,16(sp)
    1e70:	df000315 	stw	fp,12(sp)
    1e74:	df000304 	addi	fp,sp,12
    1e78:	e13ffd15 	stw	r4,-12(fp)
    1e7c:	e17ffe15 	stw	r5,-8(fp)
    1e80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1e84:	01000034 	movhi	r4,0
    1e88:	210a8104 	addi	r4,r4,10756
    1e8c:	e17ffd17 	ldw	r5,-12(fp)
    1e90:	01800044 	movi	r6,1
    1e94:	01c07fc4 	movi	r7,511
    1e98:	0001da40 	call	1da4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1e9c:	01000034 	movhi	r4,0
    1ea0:	210a7e04 	addi	r4,r4,10744
    1ea4:	e17ffe17 	ldw	r5,-8(fp)
    1ea8:	000d883a 	mov	r6,zero
    1eac:	01c07fc4 	movi	r7,511
    1eb0:	0001da40 	call	1da4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1eb4:	01000034 	movhi	r4,0
    1eb8:	210a8404 	addi	r4,r4,10768
    1ebc:	e17fff17 	ldw	r5,-4(fp)
    1ec0:	01800044 	movi	r6,1
    1ec4:	01c07fc4 	movi	r7,511
    1ec8:	0001da40 	call	1da4 <alt_open_fd>
}  
    1ecc:	e037883a 	mov	sp,fp
    1ed0:	dfc00117 	ldw	ra,4(sp)
    1ed4:	df000017 	ldw	fp,0(sp)
    1ed8:	dec00204 	addi	sp,sp,8
    1edc:	f800283a 	ret

00001ee0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1ee0:	defffc04 	addi	sp,sp,-16
    1ee4:	df000315 	stw	fp,12(sp)
    1ee8:	df000304 	addi	fp,sp,12
    1eec:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1ef0:	e0bffe17 	ldw	r2,-8(fp)
    1ef4:	10800217 	ldw	r2,8(r2)
    1ef8:	10d00034 	orhi	r3,r2,16384
    1efc:	e0bffe17 	ldw	r2,-8(fp)
    1f00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1f04:	e03ffd15 	stw	zero,-12(fp)
    1f08:	00002006 	br	1f8c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1f0c:	e0bffd17 	ldw	r2,-12(fp)
    1f10:	00c00034 	movhi	r3,0
    1f14:	18ca7e04 	addi	r3,r3,10744
    1f18:	10800324 	muli	r2,r2,12
    1f1c:	10c5883a 	add	r2,r2,r3
    1f20:	10c00017 	ldw	r3,0(r2)
    1f24:	e0bffe17 	ldw	r2,-8(fp)
    1f28:	10800017 	ldw	r2,0(r2)
    1f2c:	1880141e 	bne	r3,r2,1f80 <alt_file_locked+0xa0>
    1f30:	e0bffd17 	ldw	r2,-12(fp)
    1f34:	00c00034 	movhi	r3,0
    1f38:	18ca7e04 	addi	r3,r3,10744
    1f3c:	10800324 	muli	r2,r2,12
    1f40:	10c5883a 	add	r2,r2,r3
    1f44:	10800204 	addi	r2,r2,8
    1f48:	10800017 	ldw	r2,0(r2)
    1f4c:	1004403a 	cmpge	r2,r2,zero
    1f50:	10000b1e 	bne	r2,zero,1f80 <alt_file_locked+0xa0>
    1f54:	e0bffd17 	ldw	r2,-12(fp)
    1f58:	10800324 	muli	r2,r2,12
    1f5c:	1007883a 	mov	r3,r2
    1f60:	00800034 	movhi	r2,0
    1f64:	108a7e04 	addi	r2,r2,10744
    1f68:	1887883a 	add	r3,r3,r2
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	18800326 	beq	r3,r2,1f80 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1f74:	00bffcc4 	movi	r2,-13
    1f78:	e0bfff15 	stw	r2,-4(fp)
    1f7c:	00000a06 	br	1fa8 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1f80:	e0bffd17 	ldw	r2,-12(fp)
    1f84:	10800044 	addi	r2,r2,1
    1f88:	e0bffd15 	stw	r2,-12(fp)
    1f8c:	00800034 	movhi	r2,0
    1f90:	108ae404 	addi	r2,r2,11152
    1f94:	10800017 	ldw	r2,0(r2)
    1f98:	1007883a 	mov	r3,r2
    1f9c:	e0bffd17 	ldw	r2,-12(fp)
    1fa0:	18bfda2e 	bgeu	r3,r2,1f0c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1fa4:	e03fff15 	stw	zero,-4(fp)
    1fa8:	e0bfff17 	ldw	r2,-4(fp)
}
    1fac:	e037883a 	mov	sp,fp
    1fb0:	df000017 	ldw	fp,0(sp)
    1fb4:	dec00104 	addi	sp,sp,4
    1fb8:	f800283a 	ret

00001fbc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1fbc:	defff404 	addi	sp,sp,-48
    1fc0:	dfc00b15 	stw	ra,44(sp)
    1fc4:	df000a15 	stw	fp,40(sp)
    1fc8:	df000a04 	addi	fp,sp,40
    1fcc:	e13ffb15 	stw	r4,-20(fp)
    1fd0:	e17ffc15 	stw	r5,-16(fp)
    1fd4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1fd8:	00bfffc4 	movi	r2,-1
    1fdc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    1fe0:	00bffb44 	movi	r2,-19
    1fe4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    1fe8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1fec:	e13ffb17 	ldw	r4,-20(fp)
    1ff0:	01400034 	movhi	r5,0
    1ff4:	294ae204 	addi	r5,r5,11144
    1ff8:	0001ce00 	call	1ce0 <alt_find_dev>
    1ffc:	e0bffa15 	stw	r2,-24(fp)
    2000:	e0bffa17 	ldw	r2,-24(fp)
    2004:	1004c03a 	cmpne	r2,r2,zero
    2008:	1000051e 	bne	r2,zero,2020 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    200c:	e13ffb17 	ldw	r4,-20(fp)
    2010:	00022240 	call	2224 <alt_find_file>
    2014:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    2018:	00800044 	movi	r2,1
    201c:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2020:	e0bffa17 	ldw	r2,-24(fp)
    2024:	1005003a 	cmpeq	r2,r2,zero
    2028:	1000301e 	bne	r2,zero,20ec <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    202c:	e13ffa17 	ldw	r4,-24(fp)
    2030:	00023440 	call	2344 <alt_get_fd>
    2034:	e0bff815 	stw	r2,-32(fp)
    2038:	e0bff817 	ldw	r2,-32(fp)
    203c:	1004403a 	cmpge	r2,r2,zero
    2040:	1000031e 	bne	r2,zero,2050 <open+0x94>
    {
      status = index;
    2044:	e0bff817 	ldw	r2,-32(fp)
    2048:	e0bff715 	stw	r2,-36(fp)
    204c:	00002906 	br	20f4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    2050:	e0bff817 	ldw	r2,-32(fp)
    2054:	10800324 	muli	r2,r2,12
    2058:	1007883a 	mov	r3,r2
    205c:	00800034 	movhi	r2,0
    2060:	108a7e04 	addi	r2,r2,10744
    2064:	1885883a 	add	r2,r3,r2
    2068:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    206c:	e0fffc17 	ldw	r3,-16(fp)
    2070:	00900034 	movhi	r2,16384
    2074:	10bfffc4 	addi	r2,r2,-1
    2078:	1886703a 	and	r3,r3,r2
    207c:	e0bff917 	ldw	r2,-28(fp)
    2080:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2084:	e0bff617 	ldw	r2,-40(fp)
    2088:	1004c03a 	cmpne	r2,r2,zero
    208c:	1000061e 	bne	r2,zero,20a8 <open+0xec>
    2090:	e13ff917 	ldw	r4,-28(fp)
    2094:	0001ee00 	call	1ee0 <alt_file_locked>
    2098:	e0bff715 	stw	r2,-36(fp)
    209c:	e0bff717 	ldw	r2,-36(fp)
    20a0:	1004803a 	cmplt	r2,r2,zero
    20a4:	1000131e 	bne	r2,zero,20f4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    20a8:	e0bffa17 	ldw	r2,-24(fp)
    20ac:	10800317 	ldw	r2,12(r2)
    20b0:	1005003a 	cmpeq	r2,r2,zero
    20b4:	1000091e 	bne	r2,zero,20dc <open+0x120>
    20b8:	e0bffa17 	ldw	r2,-24(fp)
    20bc:	10800317 	ldw	r2,12(r2)
    20c0:	e13ff917 	ldw	r4,-28(fp)
    20c4:	e17ffb17 	ldw	r5,-20(fp)
    20c8:	e1bffc17 	ldw	r6,-16(fp)
    20cc:	e1fffd17 	ldw	r7,-12(fp)
    20d0:	103ee83a 	callr	r2
    20d4:	e0bfff15 	stw	r2,-4(fp)
    20d8:	00000106 	br	20e0 <open+0x124>
    20dc:	e03fff15 	stw	zero,-4(fp)
    20e0:	e0bfff17 	ldw	r2,-4(fp)
    20e4:	e0bff715 	stw	r2,-36(fp)
    20e8:	00000206 	br	20f4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    20ec:	00bffb44 	movi	r2,-19
    20f0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    20f4:	e0bff717 	ldw	r2,-36(fp)
    20f8:	1004403a 	cmpge	r2,r2,zero
    20fc:	1000091e 	bne	r2,zero,2124 <open+0x168>
  {
    alt_release_fd (index);  
    2100:	e13ff817 	ldw	r4,-32(fp)
    2104:	00021a40 	call	21a4 <alt_release_fd>
    ALT_ERRNO = -status;
    2108:	00021440 	call	2144 <alt_get_errno>
    210c:	e0fff717 	ldw	r3,-36(fp)
    2110:	00c7c83a 	sub	r3,zero,r3
    2114:	10c00015 	stw	r3,0(r2)
    return -1;
    2118:	00bfffc4 	movi	r2,-1
    211c:	e0bffe15 	stw	r2,-8(fp)
    2120:	00000206 	br	212c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    2124:	e0bff817 	ldw	r2,-32(fp)
    2128:	e0bffe15 	stw	r2,-8(fp)
    212c:	e0bffe17 	ldw	r2,-8(fp)
}
    2130:	e037883a 	mov	sp,fp
    2134:	dfc00117 	ldw	ra,4(sp)
    2138:	df000017 	ldw	fp,0(sp)
    213c:	dec00204 	addi	sp,sp,8
    2140:	f800283a 	ret

00002144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2144:	defffd04 	addi	sp,sp,-12
    2148:	dfc00215 	stw	ra,8(sp)
    214c:	df000115 	stw	fp,4(sp)
    2150:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2154:	00800034 	movhi	r2,0
    2158:	108ae504 	addi	r2,r2,11156
    215c:	10800017 	ldw	r2,0(r2)
    2160:	1005003a 	cmpeq	r2,r2,zero
    2164:	1000061e 	bne	r2,zero,2180 <alt_get_errno+0x3c>
    2168:	00800034 	movhi	r2,0
    216c:	108ae504 	addi	r2,r2,11156
    2170:	10800017 	ldw	r2,0(r2)
    2174:	103ee83a 	callr	r2
    2178:	e0bfff15 	stw	r2,-4(fp)
    217c:	00000306 	br	218c <alt_get_errno+0x48>
    2180:	00800034 	movhi	r2,0
    2184:	108bc204 	addi	r2,r2,12040
    2188:	e0bfff15 	stw	r2,-4(fp)
    218c:	e0bfff17 	ldw	r2,-4(fp)
}
    2190:	e037883a 	mov	sp,fp
    2194:	dfc00117 	ldw	ra,4(sp)
    2198:	df000017 	ldw	fp,0(sp)
    219c:	dec00204 	addi	sp,sp,8
    21a0:	f800283a 	ret

000021a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    21a4:	defffe04 	addi	sp,sp,-8
    21a8:	df000115 	stw	fp,4(sp)
    21ac:	df000104 	addi	fp,sp,4
    21b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    21b4:	e0bfff17 	ldw	r2,-4(fp)
    21b8:	108000d0 	cmplti	r2,r2,3
    21bc:	10000d1e 	bne	r2,zero,21f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    21c0:	e0bfff17 	ldw	r2,-4(fp)
    21c4:	00c00034 	movhi	r3,0
    21c8:	18ca7e04 	addi	r3,r3,10744
    21cc:	10800324 	muli	r2,r2,12
    21d0:	10c5883a 	add	r2,r2,r3
    21d4:	10800204 	addi	r2,r2,8
    21d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    21dc:	e0bfff17 	ldw	r2,-4(fp)
    21e0:	00c00034 	movhi	r3,0
    21e4:	18ca7e04 	addi	r3,r3,10744
    21e8:	10800324 	muli	r2,r2,12
    21ec:	10c5883a 	add	r2,r2,r3
    21f0:	10000015 	stw	zero,0(r2)
  }
}
    21f4:	e037883a 	mov	sp,fp
    21f8:	df000017 	ldw	fp,0(sp)
    21fc:	dec00104 	addi	sp,sp,4
    2200:	f800283a 	ret

00002204 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2204:	deffff04 	addi	sp,sp,-4
    2208:	df000015 	stw	fp,0(sp)
    220c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2210:	000170fa 	wrctl	ienable,zero
}
    2214:	e037883a 	mov	sp,fp
    2218:	df000017 	ldw	fp,0(sp)
    221c:	dec00104 	addi	sp,sp,4
    2220:	f800283a 	ret

00002224 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2224:	defffa04 	addi	sp,sp,-24
    2228:	dfc00515 	stw	ra,20(sp)
    222c:	df000415 	stw	fp,16(sp)
    2230:	df000404 	addi	fp,sp,16
    2234:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2238:	00800034 	movhi	r2,0
    223c:	108ae004 	addi	r2,r2,11136
    2240:	10800017 	ldw	r2,0(r2)
    2244:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2248:	00003306 	br	2318 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    224c:	e0bffd17 	ldw	r2,-12(fp)
    2250:	11000217 	ldw	r4,8(r2)
    2254:	0000c040 	call	c04 <strlen>
    2258:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    225c:	e0bffd17 	ldw	r2,-12(fp)
    2260:	10c00217 	ldw	r3,8(r2)
    2264:	e0bffc17 	ldw	r2,-16(fp)
    2268:	1885883a 	add	r2,r3,r2
    226c:	10bfffc4 	addi	r2,r2,-1
    2270:	10800003 	ldbu	r2,0(r2)
    2274:	10803fcc 	andi	r2,r2,255
    2278:	1080201c 	xori	r2,r2,128
    227c:	10bfe004 	addi	r2,r2,-128
    2280:	10800bd8 	cmpnei	r2,r2,47
    2284:	1000031e 	bne	r2,zero,2294 <alt_find_file+0x70>
    {
      len -= 1;
    2288:	e0bffc17 	ldw	r2,-16(fp)
    228c:	10bfffc4 	addi	r2,r2,-1
    2290:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2294:	e0bffc17 	ldw	r2,-16(fp)
    2298:	1007883a 	mov	r3,r2
    229c:	e0bffe17 	ldw	r2,-8(fp)
    22a0:	1885883a 	add	r2,r3,r2
    22a4:	10800003 	ldbu	r2,0(r2)
    22a8:	10803fcc 	andi	r2,r2,255
    22ac:	1080201c 	xori	r2,r2,128
    22b0:	10bfe004 	addi	r2,r2,-128
    22b4:	10800be0 	cmpeqi	r2,r2,47
    22b8:	10000a1e 	bne	r2,zero,22e4 <alt_find_file+0xc0>
    22bc:	e0bffc17 	ldw	r2,-16(fp)
    22c0:	1007883a 	mov	r3,r2
    22c4:	e0bffe17 	ldw	r2,-8(fp)
    22c8:	1885883a 	add	r2,r3,r2
    22cc:	10800003 	ldbu	r2,0(r2)
    22d0:	10803fcc 	andi	r2,r2,255
    22d4:	1080201c 	xori	r2,r2,128
    22d8:	10bfe004 	addi	r2,r2,-128
    22dc:	1004c03a 	cmpne	r2,r2,zero
    22e0:	10000a1e 	bne	r2,zero,230c <alt_find_file+0xe8>
    22e4:	e0bffd17 	ldw	r2,-12(fp)
    22e8:	11000217 	ldw	r4,8(r2)
    22ec:	e1bffc17 	ldw	r6,-16(fp)
    22f0:	e17ffe17 	ldw	r5,-8(fp)
    22f4:	00024ac0 	call	24ac <memcmp>
    22f8:	1004c03a 	cmpne	r2,r2,zero
    22fc:	1000031e 	bne	r2,zero,230c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2300:	e0bffd17 	ldw	r2,-12(fp)
    2304:	e0bfff15 	stw	r2,-4(fp)
    2308:	00000806 	br	232c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    230c:	e0bffd17 	ldw	r2,-12(fp)
    2310:	10800017 	ldw	r2,0(r2)
    2314:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2318:	00c00034 	movhi	r3,0
    231c:	18cae004 	addi	r3,r3,11136
    2320:	e0bffd17 	ldw	r2,-12(fp)
    2324:	10ffc91e 	bne	r2,r3,224c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2328:	e03fff15 	stw	zero,-4(fp)
    232c:	e0bfff17 	ldw	r2,-4(fp)
}
    2330:	e037883a 	mov	sp,fp
    2334:	dfc00117 	ldw	ra,4(sp)
    2338:	df000017 	ldw	fp,0(sp)
    233c:	dec00204 	addi	sp,sp,8
    2340:	f800283a 	ret

00002344 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2344:	defffc04 	addi	sp,sp,-16
    2348:	df000315 	stw	fp,12(sp)
    234c:	df000304 	addi	fp,sp,12
    2350:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2354:	00bffa04 	movi	r2,-24
    2358:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    235c:	e03ffe15 	stw	zero,-8(fp)
    2360:	00001e06 	br	23dc <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    2364:	e0bffe17 	ldw	r2,-8(fp)
    2368:	00c00034 	movhi	r3,0
    236c:	18ca7e04 	addi	r3,r3,10744
    2370:	10800324 	muli	r2,r2,12
    2374:	10c5883a 	add	r2,r2,r3
    2378:	10800017 	ldw	r2,0(r2)
    237c:	1004c03a 	cmpne	r2,r2,zero
    2380:	1000131e 	bne	r2,zero,23d0 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    2384:	e0bffe17 	ldw	r2,-8(fp)
    2388:	00c00034 	movhi	r3,0
    238c:	18ca7e04 	addi	r3,r3,10744
    2390:	10800324 	muli	r2,r2,12
    2394:	10c7883a 	add	r3,r2,r3
    2398:	e0bfff17 	ldw	r2,-4(fp)
    239c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    23a0:	00800034 	movhi	r2,0
    23a4:	108ae404 	addi	r2,r2,11152
    23a8:	10c00017 	ldw	r3,0(r2)
    23ac:	e0bffe17 	ldw	r2,-8(fp)
    23b0:	1880040e 	bge	r3,r2,23c4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    23b4:	00c00034 	movhi	r3,0
    23b8:	18cae404 	addi	r3,r3,11152
    23bc:	e0bffe17 	ldw	r2,-8(fp)
    23c0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    23c4:	e0bffe17 	ldw	r2,-8(fp)
    23c8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    23cc:	00000606 	br	23e8 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    23d0:	e0bffe17 	ldw	r2,-8(fp)
    23d4:	10800044 	addi	r2,r2,1
    23d8:	e0bffe15 	stw	r2,-8(fp)
    23dc:	e0bffe17 	ldw	r2,-8(fp)
    23e0:	10800810 	cmplti	r2,r2,32
    23e4:	103fdf1e 	bne	r2,zero,2364 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    23e8:	e0bffd17 	ldw	r2,-12(fp)
}
    23ec:	e037883a 	mov	sp,fp
    23f0:	df000017 	ldw	fp,0(sp)
    23f4:	dec00104 	addi	sp,sp,4
    23f8:	f800283a 	ret

000023fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    23fc:	defffb04 	addi	sp,sp,-20
    2400:	df000415 	stw	fp,16(sp)
    2404:	df000404 	addi	fp,sp,16
    2408:	e13ffe15 	stw	r4,-8(fp)
    240c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2410:	e0bfff17 	ldw	r2,-4(fp)
    2414:	10840070 	cmpltui	r2,r2,4097
    2418:	1000021e 	bne	r2,zero,2424 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    241c:	00840004 	movi	r2,4096
    2420:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2424:	e0fffe17 	ldw	r3,-8(fp)
    2428:	e0bfff17 	ldw	r2,-4(fp)
    242c:	1885883a 	add	r2,r3,r2
    2430:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2434:	e0bffe17 	ldw	r2,-8(fp)
    2438:	e0bffd15 	stw	r2,-12(fp)
    243c:	00000506 	br	2454 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2440:	e0bffd17 	ldw	r2,-12(fp)
    2444:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	10800804 	addi	r2,r2,32
    2450:	e0bffd15 	stw	r2,-12(fp)
    2454:	e0fffd17 	ldw	r3,-12(fp)
    2458:	e0bffc17 	ldw	r2,-16(fp)
    245c:	18bff836 	bltu	r3,r2,2440 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2460:	e0bffe17 	ldw	r2,-8(fp)
    2464:	108007cc 	andi	r2,r2,31
    2468:	1005003a 	cmpeq	r2,r2,zero
    246c:	1000021e 	bne	r2,zero,2478 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2470:	e0bffd17 	ldw	r2,-12(fp)
    2474:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2478:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    247c:	e037883a 	mov	sp,fp
    2480:	df000017 	ldw	fp,0(sp)
    2484:	dec00104 	addi	sp,sp,4
    2488:	f800283a 	ret

0000248c <exit>:
    248c:	defffe04 	addi	sp,sp,-8
    2490:	dc400015 	stw	r17,0(sp)
    2494:	000b883a 	mov	r5,zero
    2498:	2023883a 	mov	r17,r4
    249c:	dfc00115 	stw	ra,4(sp)
    24a0:	00025200 	call	2520 <__call_exitprocs>
    24a4:	8809883a 	mov	r4,r17
    24a8:	000271c0 	call	271c <_exit>

000024ac <memcmp>:
    24ac:	31ffffc4 	addi	r7,r6,-1
    24b0:	3000061e 	bne	r6,zero,24cc <memcmp+0x20>
    24b4:	00000a06 	br	24e0 <memcmp+0x34>
    24b8:	39ffffc4 	addi	r7,r7,-1
    24bc:	00bfffc4 	movi	r2,-1
    24c0:	21000044 	addi	r4,r4,1
    24c4:	29400044 	addi	r5,r5,1
    24c8:	38800526 	beq	r7,r2,24e0 <memcmp+0x34>
    24cc:	20c00003 	ldbu	r3,0(r4)
    24d0:	28800003 	ldbu	r2,0(r5)
    24d4:	18bff826 	beq	r3,r2,24b8 <memcmp+0xc>
    24d8:	1885c83a 	sub	r2,r3,r2
    24dc:	f800283a 	ret
    24e0:	0005883a 	mov	r2,zero
    24e4:	f800283a 	ret

000024e8 <strcmp>:
    24e8:	20c00007 	ldb	r3,0(r4)
    24ec:	1800051e 	bne	r3,zero,2504 <strcmp+0x1c>
    24f0:	00000606 	br	250c <strcmp+0x24>
    24f4:	21000044 	addi	r4,r4,1
    24f8:	20c00007 	ldb	r3,0(r4)
    24fc:	29400044 	addi	r5,r5,1
    2500:	18000226 	beq	r3,zero,250c <strcmp+0x24>
    2504:	28800007 	ldb	r2,0(r5)
    2508:	18bffa26 	beq	r3,r2,24f4 <strcmp+0xc>
    250c:	20c00003 	ldbu	r3,0(r4)
    2510:	28800003 	ldbu	r2,0(r5)
    2514:	1885c83a 	sub	r2,r3,r2
    2518:	f800283a 	ret

0000251c <register_fini>:
    251c:	f800283a 	ret

00002520 <__call_exitprocs>:
    2520:	defff304 	addi	sp,sp,-52
    2524:	00800034 	movhi	r2,0
    2528:	108adf04 	addi	r2,r2,11132
    252c:	df000b15 	stw	fp,44(sp)
    2530:	17000017 	ldw	fp,0(r2)
    2534:	00800034 	movhi	r2,0
    2538:	10800004 	addi	r2,r2,0
    253c:	1005003a 	cmpeq	r2,r2,zero
    2540:	d8800215 	stw	r2,8(sp)
    2544:	e0800c04 	addi	r2,fp,48
    2548:	dd800915 	stw	r22,36(sp)
    254c:	dd400815 	stw	r21,32(sp)
    2550:	dfc00c15 	stw	ra,48(sp)
    2554:	ddc00a15 	stw	r23,40(sp)
    2558:	dd000715 	stw	r20,28(sp)
    255c:	dcc00615 	stw	r19,24(sp)
    2560:	dc800515 	stw	r18,20(sp)
    2564:	dc400415 	stw	r17,16(sp)
    2568:	dc000315 	stw	r16,12(sp)
    256c:	282d883a 	mov	r22,r5
    2570:	d9000115 	stw	r4,4(sp)
    2574:	d8800015 	stw	r2,0(sp)
    2578:	282b003a 	cmpeq	r21,r5,zero
    257c:	e4400c17 	ldw	r17,48(fp)
    2580:	88001226 	beq	r17,zero,25cc <__call_exitprocs+0xac>
    2584:	ddc00017 	ldw	r23,0(sp)
    2588:	88800117 	ldw	r2,4(r17)
    258c:	8c802217 	ldw	r18,136(r17)
    2590:	143fffc4 	addi	r16,r2,-1
    2594:	80000b16 	blt	r16,zero,25c4 <__call_exitprocs+0xa4>
    2598:	9027003a 	cmpeq	r19,r18,zero
    259c:	a800171e 	bne	r21,zero,25fc <__call_exitprocs+0xdc>
    25a0:	9800051e 	bne	r19,zero,25b8 <__call_exitprocs+0x98>
    25a4:	8409883a 	add	r4,r16,r16
    25a8:	2105883a 	add	r2,r4,r4
    25ac:	1485883a 	add	r2,r2,r18
    25b0:	10c02017 	ldw	r3,128(r2)
    25b4:	b0c01226 	beq	r22,r3,2600 <__call_exitprocs+0xe0>
    25b8:	843fffc4 	addi	r16,r16,-1
    25bc:	00bfffc4 	movi	r2,-1
    25c0:	80bff61e 	bne	r16,r2,259c <__call_exitprocs+0x7c>
    25c4:	d8800217 	ldw	r2,8(sp)
    25c8:	10003226 	beq	r2,zero,2694 <__call_exitprocs+0x174>
    25cc:	dfc00c17 	ldw	ra,48(sp)
    25d0:	df000b17 	ldw	fp,44(sp)
    25d4:	ddc00a17 	ldw	r23,40(sp)
    25d8:	dd800917 	ldw	r22,36(sp)
    25dc:	dd400817 	ldw	r21,32(sp)
    25e0:	dd000717 	ldw	r20,28(sp)
    25e4:	dcc00617 	ldw	r19,24(sp)
    25e8:	dc800517 	ldw	r18,20(sp)
    25ec:	dc400417 	ldw	r17,16(sp)
    25f0:	dc000317 	ldw	r16,12(sp)
    25f4:	dec00d04 	addi	sp,sp,52
    25f8:	f800283a 	ret
    25fc:	8409883a 	add	r4,r16,r16
    2600:	88c00117 	ldw	r3,4(r17)
    2604:	2105883a 	add	r2,r4,r4
    2608:	1445883a 	add	r2,r2,r17
    260c:	18ffffc4 	addi	r3,r3,-1
    2610:	11800217 	ldw	r6,8(r2)
    2614:	1c001826 	beq	r3,r16,2678 <__call_exitprocs+0x158>
    2618:	10000215 	stw	zero,8(r2)
    261c:	303fe626 	beq	r6,zero,25b8 <__call_exitprocs+0x98>
    2620:	8d000117 	ldw	r20,4(r17)
    2624:	9800121e 	bne	r19,zero,2670 <__call_exitprocs+0x150>
    2628:	00c00044 	movi	r3,1
    262c:	1c06983a 	sll	r3,r3,r16
    2630:	90804017 	ldw	r2,256(r18)
    2634:	1884703a 	and	r2,r3,r2
    2638:	10000d26 	beq	r2,zero,2670 <__call_exitprocs+0x150>
    263c:	90804117 	ldw	r2,260(r18)
    2640:	1884703a 	and	r2,r3,r2
    2644:	10000e1e 	bne	r2,zero,2680 <__call_exitprocs+0x160>
    2648:	2105883a 	add	r2,r4,r4
    264c:	1485883a 	add	r2,r2,r18
    2650:	11400017 	ldw	r5,0(r2)
    2654:	d9000117 	ldw	r4,4(sp)
    2658:	303ee83a 	callr	r6
    265c:	88800117 	ldw	r2,4(r17)
    2660:	a0bfc61e 	bne	r20,r2,257c <__call_exitprocs+0x5c>
    2664:	b8800017 	ldw	r2,0(r23)
    2668:	147fd326 	beq	r2,r17,25b8 <__call_exitprocs+0x98>
    266c:	003fc306 	br	257c <__call_exitprocs+0x5c>
    2670:	303ee83a 	callr	r6
    2674:	003ff906 	br	265c <__call_exitprocs+0x13c>
    2678:	8c000115 	stw	r16,4(r17)
    267c:	003fe706 	br	261c <__call_exitprocs+0xfc>
    2680:	2105883a 	add	r2,r4,r4
    2684:	1485883a 	add	r2,r2,r18
    2688:	11000017 	ldw	r4,0(r2)
    268c:	303ee83a 	callr	r6
    2690:	003ff206 	br	265c <__call_exitprocs+0x13c>
    2694:	88800117 	ldw	r2,4(r17)
    2698:	10000b1e 	bne	r2,zero,26c8 <__call_exitprocs+0x1a8>
    269c:	89000017 	ldw	r4,0(r17)
    26a0:	20000a26 	beq	r4,zero,26cc <__call_exitprocs+0x1ac>
    26a4:	b9000015 	stw	r4,0(r23)
    26a8:	90000226 	beq	r18,zero,26b4 <__call_exitprocs+0x194>
    26ac:	9009883a 	mov	r4,r18
    26b0:	00000000 	call	0 <__alt_mem_SDRAM>
    26b4:	8809883a 	mov	r4,r17
    26b8:	00000000 	call	0 <__alt_mem_SDRAM>
    26bc:	bc400017 	ldw	r17,0(r23)
    26c0:	883fb11e 	bne	r17,zero,2588 <__call_exitprocs+0x68>
    26c4:	003fc106 	br	25cc <__call_exitprocs+0xac>
    26c8:	89000017 	ldw	r4,0(r17)
    26cc:	882f883a 	mov	r23,r17
    26d0:	2023883a 	mov	r17,r4
    26d4:	883fac1e 	bne	r17,zero,2588 <__call_exitprocs+0x68>
    26d8:	003fbc06 	br	25cc <__call_exitprocs+0xac>

000026dc <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    26dc:	defffd04 	addi	sp,sp,-12
    26e0:	df000215 	stw	fp,8(sp)
    26e4:	df000204 	addi	fp,sp,8
    26e8:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    26ec:	e0bfff17 	ldw	r2,-4(fp)
    26f0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    26f4:	e0bffe17 	ldw	r2,-8(fp)
    26f8:	1005003a 	cmpeq	r2,r2,zero
    26fc:	1000021e 	bne	r2,zero,2708 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    2700:	002af070 	cmpltui	zero,zero,43969
    2704:	00000106 	br	270c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2708:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    270c:	e037883a 	mov	sp,fp
    2710:	df000017 	ldw	fp,0(sp)
    2714:	dec00104 	addi	sp,sp,4
    2718:	f800283a 	ret

0000271c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    271c:	defffd04 	addi	sp,sp,-12
    2720:	dfc00215 	stw	ra,8(sp)
    2724:	df000115 	stw	fp,4(sp)
    2728:	df000104 	addi	fp,sp,4
    272c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    2730:	e13fff17 	ldw	r4,-4(fp)
    2734:	00026dc0 	call	26dc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2738:	003fff06 	br	2738 <_exit+0x1c>
    273c:	0000251c 	xori	zero,zero,148
